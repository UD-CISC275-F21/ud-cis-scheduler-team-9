{"version":3,"sources":["Components/ControlPanel.tsx","Components/SemesterTable.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","showModal","deleteAllSemesters","Col","Row","Button","className","id","onClick","variant","SemesterTable","semester","Table","scope","Object","values","courseRecord","map","course","index","department","courseID","title","description","credits","AddSemesterModal","addSemester","setVisible","visible","catalog","useState","season","setSeason","determineYear","year","setYear","setCourseRecord","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","setDepartment","setCourseID","setTitle","setDescription","setCredits","preReqs","setPreReqs","coReqs","setCoReqs","semestersOffered","setSemestersOffered","courseInfo","hide","addCourse","newCourse","courseKey","record","i","total","keys","arr","length","push","determineCreditTotal","Date","getFullYear","determineSeason","word","clearData","Modal","show","onHide","backdrop","keyboard","size","ModalHeader","closeButton","ModalBody","Form","onSubmit","event","preventDefault","getCourse","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","type","min","valueAsNumber","disabled","FormCheck","inline","name","label","checked","e","FormControl","SemesterCard","deleteSemester","getSeason","Card","bg","Header","Container","Body","Title","Footer","PlanTable","semesters","the_semester","App","plan","setPlan","courseCatalog","console","log","deleteIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6071c53c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\n\nexport function ControlPanel({showModal, deleteAllSemesters}: {showModal: (b:boolean)=>void, deleteAllSemesters: () => void}): JSX.Element{\n\n    return (\n        <Col data-testid=\"control-panel\">\n            <Row>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button className=\"button\" data-testid=\"add-semester-button\" id=\"add-semester-button\" onClick={()=>showModal(true)}>Add Semester</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                    <Button className=\"button\" variant=\"danger\" id=\"delete-all-button\" onClick = {() => deleteAllSemesters()}>Delete All Semesters</Button>\n                </Col>\n            </Row>\n        </Col>\n    );\n}","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n\nexport function SemesterTable({semester}: {semester: (Semester)}): JSX.Element {\n\n\n\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"course-title\">{course.title}</td>\n                <td id=\"course-description\">{course.description}</td>\n                <td id=\"course-credits\">{course.credits}</td>\n                <td id=\"course-edit-button\">{\n                    <Button variant=\"primary\">\n                        Edit Course\n                    </Button>\n                }</td>\n            </tr>\n        );\n    }\n\n    return (\n        <Table id=\"semester-table\">\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credits</th>\n                    <th scope=\"col\">Edit:</th>\n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(semester.courseRecord).map(renderList)}\n            </tbody>\n        </Table>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function AddSemesterModal({ addSemester, setVisible, visible, catalog}:{\n    addSemester: (s: Semester)=>void,\n    setVisible: (v:boolean)=>void,\n    visible: (boolean)\n    catalog: (Record<string, Course>)}): JSX.Element {\n\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(determineYear());\n    const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<string[][]>([[]]);\n    const [coReqs, setCoReqs] = useState<string[][]>([[]]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([]);\n    const courseInfo = {department, courseID, title, description, credits, preReqs, coReqs, semestersOffered};\n\n\n    const hide = ()=>setVisible(false);\n\n    function validateForm(): boolean { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100 && year >= determineYear();\n    }\n\n    function validateTable() {\n        return Object.values(courseRecord).length;\n    }\n\n    function validateCourse() {\n        return department != \"\" && courseID != 0 && title != \"\" && description != \"\" && credits != 0 && preReqs != [[]] && coReqs != [[]] && semestersOffered != [];\n    }\n\n\n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n\n        const key = department + courseID;\n\n        let course: Course = {\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [],\n            coReqs: [],\n            semestersOffered: []\n        };\n        \n        if(catalog[key]){\n            course = getCourse(department, courseID);\n        }\n\n        setTitle(course.title);\n        setDescription(course.description);\n        setCredits(course.credits);\n        setPreReqs(course.preReqs);\n        setCoReqs(course.coReqs);\n        setSemestersOffered(course.semestersOffered);\n    }\n\n    function addCourse(newCourse: Course){ \n        const courseKey: string = department + courseID;\n        \n        setCourseRecord({...courseRecord, [courseKey]: newCourse});\n        setCreditTotal(determineCreditTotal(courseRecord));\n        setExpectedTuition(expectedTuition);\n    }\n\n    function getCourse(department: string, id: number): Course{\n        const name = department + id;\n        \n        return catalog[name];\n    }\n\n    /*function checkCourse(course: string): boolean {\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(plan[i].courseRecord[course]){\n                return true;\n            }\n        }\n        return false;\n    }*/\n\n    function clearCourseRecord(){\n        setCourseRecord({});\n    }\n\n    function saveSemester(){\n        addSemester({season, year, courseRecord, creditTotal, expectedTuition});\n        clearData();\n        hide();\n    }\n\n    function determineCreditTotal(record: Record<string, Course>) {\n        let i = 0;\n        let total = 0;\n        const keys = Object.keys(record); \n        const arr = [];\n\n        for(i = 0; i<keys.length; i++){\n            arr.push(record[keys[i]]);\n        }\n        \n        \n\n        while(i != arr.length){\n            total += arr[i].credits;\n            i++;\n        }\n        return total;\n    }\n\n    /*function addCourse(course: Course){\n        setCourseList([...courseList, course]);\n        determineCreditTotal(courseList);\n    }*/\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        if(word === \"Fall\"){\n            setSeason(0);\n        } else if(word === \"Winter\"){\n            setSeason(1);\n        } else if(word === \"Spring\"){\n            setSeason(2);\n        } else if(word === \"Summer\"){\n            setSeason(3);\n        }\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseRecord({});\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([]);\n        setCoReqs([]);\n        setSemestersOffered([]);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"lg\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"CourseID-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                    </Form>\n                    <Button className=\"button\" type=\"submit\" data-testid=\"add-course-button\" id=\"add-course-button\" onClick={()=>addCourse(courseInfo)} disabled={!validateCourse()}>\n                        Add\n                    </Button>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\"\n                            min={determineYear()}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <SemesterTable semester={{season, year, courseRecord, creditTotal, expectedTuition}}></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseRecord}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Table, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function SemesterCard({ semester, deleteSemester }: {\n    semester: Semester;\n    deleteSemester: (deleteIndex: number) => void;\n}): JSX.Element {\n\n\n    function getSeason(season: Season): string{\n        switch(season) {\n        case 0:\n            return \"Fall\";\n        case 1:\n            return \"Winter\";\n        case 2:\n            return \"Spring\";\n        case 3:\n            return \"Summer\";\n        default:\n            return \"Inproper Semester\";\n        }\n    }\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container>\n                    <Row>\n                        <div className=\"flex-container\">\n                            {/* <div className=\"left-semester-container\"></div> */}\n                            <div className=\"middle-semester-container\">\n                                <Col>\n                                    <h1>{\"Semester: \" + getSeason(semester.season) + \" \" + semester.year}</h1>\n                                </Col>\n                            </div>\n                            <div className=\"right-semester-container\">\n                                <Button variant=\"danger\" onClick={() => deleteSemester(0)}>\n                                    Delete Semester\n                                </Button>\n                            </div>\n                        </div>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Courses:</Card.Title>\n                <Row>\n                    <Table>\n                        <SemesterTable semester={semester}></SemesterTable>\n                    </Table>\n                </Row>\n                <p>PLACEHOLDER FOR SEMESTER STATS (TOT CREDITS, ESTIMATED COST, ETC)</p>\n            </Card.Body>\n            <Card.Footer>\n                <Button variant=\"primary\">Add Semester: {getSeason(semester.season + 1)}</Button>\n            </Card.Footer>\n        </Card>   \n    );\n}","import React from \"react\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n\nexport function PlanTable({ semesters, deleteSemester }: {\n    semesters: Semester[];\n    deleteSemester: (deleteIndex: number) => void;\n}): JSX.Element {\n\n    function renderList(the_semester: Semester) {\n        return (\n            <SemesterCard semester={the_semester} deleteSemester = {deleteSemester}></SemesterCard>\n        );\n    }\n\n    return (\n        <div className=\"plan-table\">\n            {semesters.map(renderList)}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { ControlPanel } from \"./Components/ControlPanel\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Course } from \"./interface/course\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\nimport courseCatalog from \"./Assets/testcourses.json\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n    const catalog: Record<string, Course> = courseCatalog;\n\n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        setPlan([]);\n        console.log(\"Deleted All Semesters\");\n    }\n\n    function deleteSemester(deleteIndex: number) {\n        const newPlan = [...plan];\n        newPlan.splice(deleteIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    return (\n        <Container className=\"App\">\n            <Row>\n                <br></br>\n            </Row>\n            <Row>\n                <ControlPanel showModal={setVisible} deleteAllSemesters={deleteAllSemesters}></ControlPanel>\n            </Row>\n            <Row>\n                <AddSemesterModal addSemester={addSemester} setVisible={setVisible} visible={visible} catalog={catalog}></AddSemesterModal>\n            </Row>\n            <Row>\n                <PlanTable semesters = {plan} deleteSemester = {deleteSemester}></PlanTable>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}