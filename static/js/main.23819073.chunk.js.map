{"version":3,"sources":["Components/ControlPanel.tsx","Components/SemesterTable.tsx","Components/CourseCard.tsx","Components/CourseCardDisplay.tsx","Components/CardPool.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","Components/RequiredDegreeList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","showModal","deleteAllSemesters","Col","Row","Button","className","id","onClick","variant","SemesterTable","semester","Table","scope","Object","values","courseRecord","map","course","index","department","courseID","title","description","credits","CourseCard","cardInfo","setDeleteCard","showCard","hide","hideButton","useDrag","type","item","preReqs","coReqs","semestersOffered","collect","monitor","isDragging","drag","displayReqs","s","i","undefined","phrase","length","Card","draggable","ref","style","opacity","Body","Title","Text","semesters","forEach","displaySemesters","CourseCardDisplay","courseInfo","setCourseInfo","useDrop","accept","dropEffect","drop","handleDisplay","isOver","addToDisplay","console","log","CardPool","deleteCard","useState","pool","setPool","find","handlePool","addToPoolRef","courseCard","AddSemesterModal","addSemester","checkSemester","setVisible","checkCourse","visible","catalog","season","setSeason","year","setYear","setCourseRecord","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","semesterInfo","setDepartment","setCourseID","setTitle","setDescription","setCredits","setPreReqs","setCoReqs","setSemestersOffered","preRequirements","setPreRequirements","coRequirements","setCoRequirements","setShowCard","showPreWarning","setShowPreWarning","showCoWarning","setShowCoWarning","addCourse","newCourse","courseKey","record","total","keys","arr","push","determineCreditTotal","determineYear","Date","getFullYear","determineSeason","word","clearData","useEffect","courseArray","valid_course","j","h","temp","validateCoRequirements","Modal","show","onHide","backdrop","keyboard","size","ModalHeader","closeButton","ModalBody","Form","onSubmit","event","preventDefault","getCourse","validatePreRequirements","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","min","valueAsNumber","disabled","includes","FormCheck","inline","name","label","checked","e","FormControl","placeholder","max","role","xmlns","width","height","fill","viewBox","d","paddingLeft","SemesterCard","deleteSemester","getSeason","bg","Header","Container","Footer","PlanTable","semesterJSX","sort","a","b","the_semester","toString","semesterPairs","slice","truncatedSemesterCardArray","RequiredDegreeList","degree_list","App","plan","setPlan","courseCatalog","degreePlan","setDegreePlan","requiredCourses","setRequiredCourses","violations","checkDegreePlan","DndProvider","backend","HTML5Backend","semesterToCheck","deleteSemesterIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23819073.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\n\nexport function ControlPanel({showModal, deleteAllSemesters}: {showModal: (b:boolean)=>void, deleteAllSemesters: () => void}): JSX.Element{\n\n    return (\n        <Col data-testid=\"control-panel\">\n            <Row>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button className=\"button\" data-testid=\"add-semester-modal-button\" id=\"add-semester-modal-button\" onClick={()=>showModal(true)}>Add Semester</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                    <Button className=\"button\" variant=\"danger\" id=\"delete-all-semesters-button\" onClick = {() => deleteAllSemesters()}>Delete All Semesters</Button>\n                </Col>\n            </Row>\n        </Col>\n    );\n}","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n\nexport function SemesterTable({semester}: {semester: (Semester)}): JSX.Element {\n\n\n\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"course-title\">{course.title}</td>\n                <td id=\"course-description\">{course.description}</td>\n                <td id=\"course-credits\">{course.credits}</td>\n                <td id=\"course-edit-button\">{\n                    <Button variant=\"primary\">\n                        Edit Course\n                    </Button>\n                }</td>\n            </tr>\n        );\n    }\n\n    return (\n        <Table id=\"semester-table\">\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credits</th>\n                    <th scope=\"col\">Edit:</th>\n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(semester.courseRecord).map(renderList)}\n            </tbody>\n        </Table>\n    );\n}","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { Season } from \"../interface/semester\";\n\n\nexport function CourseCard({cardInfo, setDeleteCard, showCard, hide, hideButton}: {\n    cardInfo: Course,\n    setDeleteCard:(c:Course) => void, \n    showCard: boolean,\n    hide: boolean,\n    hideButton: boolean}): JSX.Element{\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: \"courseCard\",\n        item: { \n            department: cardInfo.department, \n            courseID: cardInfo.courseID, \n            title: cardInfo.title, \n            description: cardInfo.description, \n            credits: cardInfo.credits, \n            preReqs: cardInfo.preReqs, \n            coReqs: cardInfo.coReqs, \n            semestersOffered: cardInfo.semestersOffered\n        },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    }), [cardInfo.department, cardInfo.courseID]);\n\n    function displayReqs(s: string[][]): string | undefined{\n        let i;\n        if(showCard && s != undefined){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \", \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n    \n    function displaySemesters(semesters: Season[]){\n        let i = 0;\n        let phrase = \"\";\n        if(semesters != undefined){\n            semesters.forEach((s)=>{\n                switch(s){\n                case 0:\n                    phrase = phrase + \"Fall\";\n                    break;\n                case 1:\n                    phrase = phrase + \"Winter\";\n                    break;\n                case 2:\n                    phrase = phrase + \"Spring\";\n                    break;\n                case 3:\n                    phrase = phrase + \"Summer\";\n                    break;\n                }\n                \n                i++;\n                if(i<semesters.length)\n                    phrase = phrase + \", \";\n            });\n        }\n        return phrase;\n    }\n    \n    return (\n        <Card draggable className = \"draggable-card\" ref={drag} style={{opacity: isDragging ? \"50%\" : \"100%\"}}>\n            <Card.Body>\n                <Card.Title>{cardInfo.department}{cardInfo.courseID}: {cardInfo.title} {!hideButton && <Button className=\"Danger\" onClick={()=>setDeleteCard(cardInfo)}>-</Button>}\n                    <Card.Text> Credits: {cardInfo.credits}</Card.Text>\n                </Card.Title> \n                {!hide && <Card.Text>{cardInfo.description}</Card.Text>}\n                {!hide && <Card.Text>Prereqs: {displayReqs(cardInfo.preReqs)}</Card.Text>} \n                {!hide && <Card.Text>Coreqs: {displayReqs(cardInfo.coReqs)}</Card.Text>} \n                {!hide && <Card.Text>Semesters: {displaySemesters(cardInfo.semestersOffered)}</Card.Text>}\n            </Card.Body>\n        </Card>\n    );\n}","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { CourseCard } from \"./CourseCard\";\n\n\nexport function CourseCardDisplay({courseInfo, setCourseInfo, setDeleteCard, showCard}: {\n    courseInfo: Course, \n    setCourseInfo:(b: Course) => void, \n    setDeleteCard:(c:Course) => void, \n    showCard: boolean}): JSX.Element{\n\n    const [{ isOver }, addToDisplay] = useDrop(() => ({\n        accept: \"courseCard\",\n        item: { \n            department: courseInfo.department, \n            courseID: courseInfo.courseID, \n            title: courseInfo.title, \n            description: courseInfo.description, \n            credits: courseInfo.credits, \n            preReqs: courseInfo.preReqs, \n            coReqs: courseInfo.coReqs, \n            semestersOffered: courseInfo.semestersOffered\n        },\n        dropEffect: \"move\",\n        drop: (item: Course) =>  handleDisplay(item),\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n        }),\n    }), [courseInfo.department, courseInfo.courseID]);\n\n    function handleDisplay(item: Course){\n        if(courseInfo.department != item.department || courseInfo.courseID != item.courseID)\n            setCourseInfo(item);\n    }\n\n    return (\n        <div id = \"course-display\" ref={addToDisplay}>\n            {<CourseCard cardInfo={courseInfo} setDeleteCard={setDeleteCard} showCard={showCard} hide={false} hideButton={true}/>}\n            {isOver && console.log(\"over display\")}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Course } from \"../interface/course\";\nimport { useDrop } from \"react-dnd\";\nimport { CourseCard } from \"./CourseCard\";\n\nexport function CardPool({showCard, deleteCard, setDeleteCard}: {\n    showCard: boolean,\n    deleteCard: Course | undefined, \n    setDeleteCard:(c:Course) => void}): JSX.Element{\n\n    const [pool, setPool] = useState<Course[]>([]);\n    const [{ isOver } , addToPoolRef] = useDrop({\n        accept: \"courseCard\",\n        drop: (item: Course) => handlePool(item),\n    });\n\n    function handlePool(item: Course){\n        if (!pool.find((course) => course.department === item.department && course.courseID === item.courseID)) {\n            setPool([...pool, item]);\n        }\n    }\n\n    if(deleteCard){\n        console.log(\"Hi\");\n        /*setPool(pool.filter((element) => {\n            element !== deleteCard;\n        }));\n        setDeleteCard(undefined);*/\n    }\n\n    return (\n        <div id = \"card-pool\" ref={addToPoolRef}>\n            {pool.map((courseCard, i) => \n                <CourseCard key={i} cardInfo={courseCard} setDeleteCard={setDeleteCard} showCard={showCard} hide={true} hideButton={false}/> \n            )}\n            {isOver && console.log(\"over pool\")}\n        </div>\n    );\n}","import React, { useEffect, useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\nimport { CourseCardDisplay } from \"./CourseCardDisplay\";\nimport { CardPool } from \"./CardPool\";\n\nexport function AddSemesterModal({ addSemester, checkSemester, setVisible, checkCourse, visible, catalog}:{\n    addSemester: (s: Semester)=>void,\n    checkSemester: (c: Semester)=>boolean,\n    setVisible: (v:boolean)=>void,\n    checkCourse: (c: string)=>boolean,\n    visible: (boolean),\n    catalog: (Record<string, Course>)}): JSX.Element {\n\n    // semester states\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(1);\n    const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n    const semesterInfo = {season, year, courseRecord, creditTotal, expectedTuition};\n\n    // course states\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<string[][]>([[]]);\n    const [coReqs, setCoReqs] = useState<string[][]>([[]]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([]);\n    const [preRequirements, setPreRequirements] = useState<boolean>(true);\n    const [coRequirements, setCoRequirements] = useState<boolean>(true);\n    const [courseInfo, setCourseInfo] = useState<Course>({department, courseID, title, description, credits, preReqs, coReqs, semestersOffered});\n\n    // course card states\n    const [showCard, setShowCard] = useState<boolean>(false);\n    const [deleteCard, setDeleteCard] = useState<Course>();\n\n    // add semester modal states\n    const [showPreWarning, setShowPreWarning] = useState<boolean>(false);\n    const [showCoWarning, setShowCoWarning] = useState<boolean>(false);\n    const hide = ()=>setVisible(false);\n\n    function validateForm(): boolean { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100 && year >= determineYear();\n    }\n\n    function validateTable() {\n        return Object.values(courseRecord).length > 0 && !checkSemester(semesterInfo) && coRequirements;\n    }\n\n    function validateCourse() {\n        return preRequirements && department != \"\" && courseID != 0 && title != \"\" && description != \"\" && credits != 0 && preReqs != [[]] && coReqs != [[]] && semestersOffered != []  && semestersOffered.includes(season);\n    }\n\n    useEffect (() => {\n        setShowCoWarning(false);\n        validateCoRequirements();\n    }, [courseRecord]);\n\n    function validateCoRequirements(){\n        //Iterate through each course  \n        const courseArray: Course[] = Object.values(courseRecord);\n        let valid_course = true;\n        for (let i = 0; i < courseArray.length; i++){\n            //If there are no prerequisites, the course is valid, you can probably just break here.\n            if (courseArray[i].coReqs[0][0] == \"\"){\n                console.log(\"Coreqs is empty?\");\n                setCoRequirements(true);\n                return;\n            }\n\n            //We look in each prerequisite structure, which holds the keys we are looking for\n            for (let j = 0; j < courseArray[i].coReqs.length; j++){\n                //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n                console.log(courseArray[i].coReqs[j].length);\n                for (let h = 0; h < courseArray[i].coReqs[j].length; h++){\n                    //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                    console.log(courseArray[i].coReqs[j][h]);\n                    const temp: string = courseArray[i].coReqs[j][h];\n                    console.log(courseRecord[temp]);\n                    if (!courseRecord[temp]){\n                        console.log(\"not in plan\");\n                        valid_course = valid_course && false;\n                    }else{\n                        console.log(\"in plan\");\n                        valid_course = valid_course && true;\n                    }\n                }\n            }    \n            if (valid_course){\n                console.log(\"Valid Course.\");\n                setCoRequirements(true);\n            } else {\n                console.log(\"Invalid Course.\");\n                setShowCoWarning(true);\n                setCoRequirements(false);\n            }\n        }\n    }\n    \n    function validatePreRequirements(course: Course){\n        //Iterate through each course   \n        let valid_course = true;\n        //If there are no prerequisites, the course is valid, you can probably just break here.\n        if (course.preReqs[0][0] == \"\"){\n            console.log(\"Prereqs is empty?\");\n            setPreRequirements(true);\n            return;\n        }\n\n        //We look in each prerequisite structure, which holds the keys we are looking for\n        for (let j = 0; j < course.preReqs.length; j++){\n            //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n            for (let h = 0; h < course.preReqs[j].length; h++){\n                //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                console.log(course.preReqs[j][h]);\n                if (!checkCourse(course.preReqs[j][h])){\n                    console.log(\"not in plan\");\n                    valid_course = valid_course && false;\n                }else{\n                    console.log(\"in plan\");\n                    valid_course = valid_course && true;\n                }\n            }\n        }    \n        if (valid_course){\n            console.log(\"Valid Course.\");\n            setPreRequirements(true);\n        } else {\n            setShowPreWarning(true);\n            setPreRequirements(false);\n        }\n    }\n   \n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n\n        const key = department + courseID;\n\n        let course: Course = {\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            semestersOffered: []\n        };\n        \n        if(catalog[key]){\n            course = getCourse(department, courseID);\n            setCourseInfo(course);\n            setShowCard(true);\n        } else{\n            setShowCard(false);\n        }\n\n        setShowPreWarning(false);\n        validatePreRequirements(course);\n        setTitle(course.title);\n        setDescription(course.description);\n        setCredits(course.credits);\n        setPreReqs(course.preReqs);\n        setCoReqs(course.coReqs);\n        setSemestersOffered(course.semestersOffered);\n        \n    }\n\n    function addCourse(newCourse: Course){ \n        const courseKey: string = newCourse.department + newCourse.courseID;\n\n        setCourseRecord({...courseRecord, [courseKey]: newCourse});\n        setCreditTotal(determineCreditTotal(courseRecord));\n        setExpectedTuition(expectedTuition);\n    }\n\n    function getCourse(department: string, id: number): Course{\n        const name = department + id;\n        \n        return catalog[name];\n    }\n\n    function clearCourseRecord(){\n        setShowCoWarning(false);\n        setCourseRecord({});\n    }\n\n    function saveSemester(){\n        addSemester(semesterInfo);\n        clearData();\n        setShowCard(false);\n        hide();\n    }\n\n    function determineCreditTotal(record: Record<string, Course>) {\n        let i = 0;\n        let total = 0;\n        const keys = Object.keys(record); \n        const arr = [];\n\n        for(i = 0; i<keys.length; i++){\n            arr.push(record[keys[i]]);\n        }\n        \n        while(i != arr.length){\n            total += arr[i].credits;\n            i++;\n        }\n\n        return total;\n    }\n\n    function displayReqs(s: string[][]): string | undefined{\n        let i;\n        if(showCard && s != undefined){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \", \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        if(word === \"Fall\"){\n            setSeason(3);\n        } else if(word === \"Winter\"){\n            setSeason(0);\n        } else if(word === \"Spring\"){\n            setSeason(1);\n        } else if(word === \"Summer\"){\n            setSeason(2);\n        }\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseRecord({});\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([[\"\"]]);\n        setCoReqs([[\"\"]]);\n        setSemestersOffered([]);\n\n        //Course Card\n        setShowPreWarning(false);\n        setShowCard(false);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"xl\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"CourseID-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"add-course-button\" id=\"add-course-button\" onClick={()=>addCourse(courseInfo)} disabled={!validateCourse()}>\n                            Add\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\" placeholder=\"Year\"\n                            min={determineYear()}\n                            max={(determineYear() + 6)}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                {showPreWarning && \n                    <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                        </svg>\n                        <div style = {{ paddingLeft: 10 }}>\n                            You cannot add this course to your semester as it&apos;s prerequisite(s) has not been fufilled in a previous semester ({displayReqs(preReqs)})\n                        </div>\n                    </div>}\n                <Row>\n                    <Col>\n                        {showCard && <CourseCardDisplay courseInfo = {courseInfo} setCourseInfo = {setCourseInfo} setDeleteCard={setDeleteCard} showCard={showCard}></CourseCardDisplay>}\n                    </Col>\n                    <Col>\n                        <CardPool showCard={showCard} deleteCard={deleteCard} setDeleteCard={setDeleteCard}></CardPool>\n                    </Col>\n                </Row>\n                <Row>\n                    {showCoWarning && \n                    <div className=\"alert alert-warning d-flex align-items-center\" role=\"alert\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                        </svg>\n                        <div style = {{ paddingLeft: 10 }}>\n                            You cannot save this semester until you add the corequisites for your courses: {displayReqs(coReqs)}\n                        </div>\n                    </div>}\n                    <SemesterTable semester={{season, year, courseRecord, creditTotal, expectedTuition}}></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseRecord}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function SemesterCard({ semester, deleteSemester }: {\n    semester: Semester;\n    deleteSemester: (semester: Semester) => void;\n}): JSX.Element {\n\n\n    function getSeason(season: Season): string{\n        switch(season) {\n        case 3:\n            return \"Fall\";\n        case 0:\n            return \"Winter\";\n        case 1:\n            return \"Spring\";\n        case 2:\n            return \"Summer\";\n        default:\n            return \"Inproper Semester\";\n        }\n    }\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container>\n                    <Row>\n                        <div className=\"flex-container\">\n                            {/* <div className=\"left-semester-container\"></div> */}\n                            <div className=\"middle-semester-container\">\n                                <Col>\n                                    <h1>{\"Semester: \" + getSeason(semester.season) + \" \" + semester.year}</h1>\n                                </Col>\n                            </div>\n                            <div className=\"right-semester-container\">\n                                <Button variant=\"danger\" onClick={() => deleteSemester(semester)}>\n                                    Delete Semester\n                                </Button>\n                            </div>\n                        </div>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Courses:</Card.Title>\n                <Row>\n                    <SemesterTable semester={semester}></SemesterTable>\n                </Row>\n                <p>PLACEHOLDER FOR SEMESTER STATS (TOT CREDITS, ESTIMATED COST, ETC)</p>\n            </Card.Body>\n            <Card.Footer>\n                <Button variant=\"primary\">Add Semester: {getSeason((semester.season + 1) % 4)}</Button>\n            </Card.Footer>\n        </Card>   \n    );\n}","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n\nexport function PlanTable({ semesters, deleteSemester, showModal }: {\n    semesters: Semester[];\n    deleteSemester: (semester: Semester) => void;\n    showModal: (b:boolean) => void;\n}): JSX.Element {\n\n    const sortedSemesters = semesters.sort(compareSeason).sort(compareYear);\n\n    function compareYear(a: Semester, b: Semester){\n        return a.year - b.year;\n    }\n\n    function compareSeason(a: Semester, b: Semester){\n        return a.season - b.season;\n    }\n\n    function renderList(the_semester: Semester): JSX.Element {\n        return (\n            <SemesterCard key={the_semester.season.toString() + the_semester.year.toString()} semester={the_semester} deleteSemester = {deleteSemester}></SemesterCard>\n        );\n    }\n\n    function listDisplay(truncatedSemesterCardArray: JSX.Element[]): JSX.Element {\n\n        if (!(truncatedSemesterCardArray.length % 2)) {\n            return (\n                <Row>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                        {truncatedSemesterCardArray[1]}\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <Row>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                    </Col>\n                </Row>\n            );\n        }\n    }\n\n    const semesterJSX: JSX.Element[] = sortedSemesters.map(renderList);\n    semesterJSX.push(<Card><Button\n        className=\"button\"\n        data-testid=\"add-semester-button-plan-table\"\n        id=\"add-semester-button-plan-table\"\n        onClick={()=>showModal(true)}>Add Semester</Button></Card>);\n    const semesterPairs: JSX.Element[][] = [];\n\n    for(let i = 0; i < semesterJSX.length; i += 2) {\n        semesterPairs.push(semesterJSX.slice(i, i + 2));\n    }\n    \n\n    return (\n        <div className=\"plan-table\" id=\"plan-table\">\n            {semesterPairs.map(listDisplay)}\n        </div>\n    );\n}","import React from \"react\";\n\nexport function RequiredDegreeList({degree_list}: {degree_list: string[]}): JSX.Element{\n    \n    function createList(course: string){\n        return(\n            <a className=\"list-group-item list-group-item-action\" key = {course}> {course} </a>\n        );\n    }\n\n    return(\n        <div className=\"list-group w-25\" id = \"degree_requirements\">\n            <a className=\"list-group-item list-group-item-action active\"> Required Courses </a>\n            {degree_list.map(createList)}\n        </div>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { ControlPanel } from \"./Components/ControlPanel\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Course } from \"./interface/course\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\nimport { RequiredDegreeList } from \"./Components/RequiredDegreeList\";\n\nimport courseCatalog from \"./Assets/testcourses.json\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n    const catalog: Record<string, Course> = courseCatalog;\n    const [degreePlan, setDegreePlan] = useState<string[]>([\"CISC210\", \"MATH241\"]);\n    const [requiredCourses, setRequiredCourses] = useState<string[]>(degreePlan);\n\n    useEffect (() => {\n        checkDegreePlan();\n    }, [plan]);\n    \n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        //just to bypass the linter warning, remove later\n        setDegreePlan(degreePlan);\n\n        setPlan([]);\n        console.log(\"Deleted All Semesters\");\n    }\n\n    function checkCourse(course: string): boolean {\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(plan[i].courseRecord[course]){\n                return true;\n            }\n        }\n        return false;\n    }\n    function deleteSemester(semester: Semester) {\n        let deleteSemesterIndex = 0;\n        for(let i = 0; i < plan.length; i++) {\n            if(semester.season === plan[i].season && semester.year === plan[i].year) {\n                deleteSemesterIndex = i;\n            }\n        }\n        const newPlan = [...plan];\n        newPlan.splice(deleteSemesterIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    function checkDegreePlan() {\n        let violations: string[] = [];\n        for (let i = 0; i < degreePlan.length; i++){\n            //console.log(\"TESTING \" + degreePlan[i]);\n            //console.log(checkCourse(degreePlan[i]));\n            if (!checkCourse(degreePlan[i])){\n                const course: string = degreePlan[i];\n                violations = [...violations, course];\n            }\n        } \n        //It seems that useState does not like trying to set its variable in a loop multiple times\n        setRequiredCourses(violations);\n    }\n    function checkSemester(semesterToCheck: Semester): boolean{\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(semesterToCheck.year === plan[i].year && semesterToCheck.season === plan[i].season)\n                return true;\n        }\n        return false;\n    }\n\n    return (\n        <DndProvider backend = {HTML5Backend}>\n            <Container className=\"App\">\n                <Row>\n                    <br></br>\n                </Row>\n                <Row>\n                    <ControlPanel showModal={setVisible} deleteAllSemesters={deleteAllSemesters}></ControlPanel>\n                </Row>\n                <Row>\n                    <AddSemesterModal addSemester={addSemester} checkSemester={checkSemester} setVisible={setVisible} checkCourse = {checkCourse} visible={visible} catalog={catalog}></AddSemesterModal>\n                    <RequiredDegreeList degree_list = {requiredCourses}></RequiredDegreeList>\n                </Row>\n                <Row>\n                    <PlanTable semesters = {plan} deleteSemester = {deleteSemester} showModal={setVisible}></PlanTable>\n                </Row>\n                <Row>\n                </Row>\n            </Container>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}