{"version":3,"sources":["Components/SemesterTable.tsx","Components/CourseCard.tsx","Components/CourseCardDisplay.tsx","Components/CardPool.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","Components/EditCourseModal.tsx","Components/RequiredDegreeList.tsx","Assets/University_of_Delaware_wordmark.svg","Components/SchedulerNavbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SemesterTable","semester","editCourseLauncher","deleteCourse","addCourse","useDrop","accept","drop","item","isOver","addToTableRef","Table","id","ref","className","scope","Object","values","courseRecord","map","course","index","department","courseID","title","description","substring","credits","Button","variant","size","onClick","console","log","CourseCard","cardInfo","setDeleteCard","showCard","hide","hideButton","useDrag","type","preReqs","coReqs","semestersOffered","collect","monitor","isDragging","drag","displayReqs","s","i","undefined","phrase","length","Card","draggable","style","opacity","Body","Title","Text","semesters","forEach","displaySemesters","CourseCardDisplay","courseInfo","setCourseInfo","useState","deleteCard","dropEffect","handleDisplay","addToDisplay","CardPool","pool","setPool","find","handlePool","addToPoolRef","filter","courseCard","AddSemesterModal","addSemester","checkSemester","setVisible","checkCourse","visible","catalog","season","setSeason","year","setYear","setCourseRecord","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","semesterInfo","setDepartment","setCourseID","setTitle","setDescription","setCredits","setPreReqs","setCoReqs","setSemestersOffered","preRequirements","setPreRequirements","coRequirements","setCoRequirements","setShowCard","showPreWarning","setShowPreWarning","showCoWarning","setShowCoWarning","newCourse","courseKey","record","total","keys","arr","push","determineCreditTotal","determineYear","Date","getFullYear","determineSeason","word","clearData","useEffect","courseArray","valid_course","j","h","temp","validateCoRequirements","Modal","show","onHide","backdrop","keyboard","ModalHeader","closeButton","ModalBody","Row","Form","onSubmit","event","preventDefault","getCourse","validatePreRequirements","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","min","valueAsNumber","disabled","includes","Col","FormCheck","inline","name","label","checked","e","FormControl","placeholder","max","role","xmlns","width","height","fill","viewBox","d","paddingLeft","SemesterCard","deleteSemester","getSeason","bg","Header","Container","Footer","PlanTable","showModal","semesterJSX","sort","a","b","the_semester","toString","semesterPairs","slice","truncatedSemesterCardArray","key","EditCourseModal","setEditCourseVisible","editCourseVisible","editCourse","setNewCourse","validated","setValidated","resetCourseHooks","noValidate","form","currentTarget","checkValidity","stopPropagation","inputValueArray","Array","elements","copyElement","updateNewCourse","parseInt","md","controlId","required","defaultValue","Feedback","pattern","ModalFooter","RequiredDegreeList","degree_list","SchedulerNavbar","deleteAllSemesters","Navbar","sticky","expand","Brand","href","alt","src","UDLogo","Nav","justify","Item","Link","NavDropdown","eventKey","Divider","App","plan","setPlan","courseCatalog","degreePlan","setDegreePlan","requiredCourses","setRequiredCourses","currentCourse","setCurrentCourse","semesterIndex","setSemesterIndex","semesterToCheck","violations","checkDegreePlan","DndProvider","backend","HTML5Backend","editSemesterIndex","deleteSemesterIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c996da5b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { useDrop } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n/**\n * Formats the Courses in a Semester within a Table, adds Edit and Delete buttons\n * if called in PlanTable.\n * @param semester A semester.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n * @param addCourse Adds a course to the courseRecord.\n *\n * @returns {JSX.Element} A JSX.Element containing a table poplated with the\n * courses in a Semester.\n */\nexport function SemesterTable({semester, editCourseLauncher, deleteCourse, addCourse}: { \n    semester: (Semester);\n    editCourseLauncher?: ({course, semester}: {course: Course, semester:Semester}) => void,\n    deleteCourse?: ({course, semester}: {course: Course, semester:Semester}) => void,\n    addCourse?: (newCourse: Course) => void\n    }): JSX.Element {\n      \n    const [{ isOver } , addToTableRef] = useDrop({\n        accept: \"courseCard\",\n        drop: (item: Course) => {\n            addCourse && addCourse(item);\n        },\n    });\n\n    /**\n    * Renders a single row in the table with a course's information.\n    * @param course A Course.\n    * @param index The index of the Course in the Semester.\n    *\n    * @returns {JSX.Element} A JSX.Element containing a <tr> with the course's\n    * name, title, description, credits, as well as an edit and delete button\n    * for the course if editCourseLauncher and deleteCourse are passed in.\n    */\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"course-title\">{course.title}</td>\n                <td id=\"course-description\">{course.description.substring(0, 50) + \"...\"}</td>\n                <td id=\"course-credits\">{course.credits}</td>\n                {editCourseLauncher && \n                <td id=\"course-edit-button\">\n                    <Button\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => editCourseLauncher({course, semester})}\n                    >Edit Course</Button>  \n                </td>}\n                {deleteCourse &&\n                <td>\n                    <Button\n                        variant=\"danger\"\n                        className=\"btn-block\"\n                        size=\"sm\"\n                        onClick={() => deleteCourse({course, semester})}\n                    >Delete Course</Button>\n                </td>}\n            </tr>\n        );\n    }\n\n    return (\n        <Table id=\"semester-table\" ref={addToTableRef}>\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credits</th>\n                    {editCourseLauncher && <th scope=\"col\">Edit:</th>}\n                    {editCourseLauncher && <th scope=\"col\">Delete:</th>} \n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(semester.courseRecord).map(renderList)}\n            </tbody>\n            {isOver && console.log(\"over table\")}\n        </Table>\n    );\n}","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { Season } from \"../interface/semester\";\n\n\nexport function CourseCard({cardInfo, setDeleteCard, showCard, hide, hideButton}: {\n    cardInfo: Course,\n    setDeleteCard:(c:Course | undefined) => void, \n    showCard: boolean,\n    hide: boolean,\n    hideButton: boolean}): JSX.Element{\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: \"courseCard\",\n        item: { \n            department: cardInfo.department, \n            courseID: cardInfo.courseID, \n            title: cardInfo.title, \n            description: cardInfo.description, \n            credits: cardInfo.credits, \n            preReqs: cardInfo.preReqs, \n            coReqs: cardInfo.coReqs, \n            semestersOffered: cardInfo.semestersOffered\n        },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    }), [cardInfo.department, cardInfo.courseID]);\n\n    function displayReqs(s: string[][]): string | undefined{\n        let i;\n        if(showCard && s != undefined){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \", \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n    \n    function displaySemesters(semesters: Season[]){\n        let i = 0;\n        let phrase = \"\";\n        if(semesters != undefined){\n            semesters.forEach((s)=>{\n                switch(s){\n                case 0:\n                    phrase = phrase + \"Fall\";\n                    break;\n                case 1:\n                    phrase = phrase + \"Winter\";\n                    break;\n                case 2:\n                    phrase = phrase + \"Spring\";\n                    break;\n                case 3:\n                    phrase = phrase + \"Summer\";\n                    break;\n                }\n                \n                i++;\n                if(i<semesters.length)\n                    phrase = phrase + \", \";\n            });\n        }\n        return phrase;\n    }\n    \n    return (\n        <Card draggable className = \"draggable-card\" ref={drag} style={{opacity: isDragging ? \"50%\" : \"100%\"}}>\n            <Card.Body>\n                <Card.Title>{cardInfo.department}{cardInfo.courseID}: {cardInfo.title} {!hideButton && <Button className=\"Danger\" onClick={()=>setDeleteCard(cardInfo)}>-</Button>}\n                    <Card.Text> Credits: {cardInfo.credits}</Card.Text>\n                </Card.Title> \n                {!hide && <Card.Text>{cardInfo.description}</Card.Text>}\n                {!hide && <Card.Text>Prereqs: {displayReqs(cardInfo.preReqs)}</Card.Text>} \n                {!hide && <Card.Text>Coreqs: {displayReqs(cardInfo.coReqs)}</Card.Text>} \n                {!hide && <Card.Text>Semesters: {displaySemesters(cardInfo.semestersOffered)}</Card.Text>}\n            </Card.Body>\n        </Card>\n    );\n}","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { CourseCard } from \"./CourseCard\";\n\n\nexport function CourseCardDisplay({courseInfo, setCourseInfo, showCard}: {\n    courseInfo: Course, \n    setCourseInfo:(b: Course) => void, \n    showCard: boolean}): JSX.Element{\n\n    const [deleteCard, setDeleteCard] = useState<Course>();\n    if(deleteCard != undefined)\n        setDeleteCard(undefined);\n\n    const [{ isOver }, addToDisplay] = useDrop(() => ({\n        accept: \"courseCard\",\n        item: { \n            department: courseInfo.department, \n            courseID: courseInfo.courseID, \n            title: courseInfo.title, \n            description: courseInfo.description, \n            credits: courseInfo.credits, \n            preReqs: courseInfo.preReqs, \n            coReqs: courseInfo.coReqs, \n            semestersOffered: courseInfo.semestersOffered\n        },\n        dropEffect: \"move\",\n        drop: (item: Course) =>  handleDisplay(item),\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n        }),\n    }), [courseInfo.department, courseInfo.courseID]);\n\n    function handleDisplay(item: Course){\n        if(courseInfo.department != item.department || courseInfo.courseID != item.courseID)\n            setCourseInfo(item);\n    }\n\n    return (\n        <div id = \"course-display\" ref={addToDisplay}>\n            {<CourseCard cardInfo={courseInfo} setDeleteCard={setDeleteCard} showCard={showCard} hide={false} hideButton={true}/>}\n            {isOver && console.log(\"over display\")}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Course } from \"../interface/course\";\nimport { useDrop } from \"react-dnd\";\nimport { CourseCard } from \"./CourseCard\";\n\nexport function CardPool({showCard}: {showCard: boolean}): JSX.Element{\n    const [pool, setPool] = useState<Course[]>([]);\n    const [deleteCard, setDeleteCard] = useState<Course>();\n\n    const [{ isOver } , addToPoolRef] = useDrop({\n        accept: \"courseCard\",\n        drop: (item: Course) => handlePool(item),\n    });\n\n    function handlePool(item: Course){\n        if (!pool.find((course) => course.department === item.department && course.courseID === item.courseID)) {\n            setPool([...pool, item]);\n        }\n    }\n\n    if(deleteCard != undefined){\n        console.log(\"Hi\");\n        setPool(pool.filter(courseCard => courseCard.department + courseCard.courseID !== deleteCard.department + deleteCard.courseID));\n        setDeleteCard(undefined);\n    }\n\n    return (\n        <div id = \"card-pool\" ref={addToPoolRef}>\n            {pool.map((courseCard, i) => \n                <div key={i}>\n                    <CourseCard cardInfo={courseCard} setDeleteCard={setDeleteCard} showCard={showCard} hide={true} hideButton={false}/>\n                </div>\n            )}\n            {isOver && console.log(\"over pool\")}\n        </div>\n    );\n}","import React, { useEffect, useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\nimport { CourseCardDisplay } from \"./CourseCardDisplay\";\nimport { CardPool } from \"./CardPool\";\n\nexport function AddSemesterModal({ addSemester, checkSemester, setVisible, checkCourse, visible, catalog}:{\n    addSemester: (s: Semester)=>void,\n    checkSemester: (c: Semester)=>number,\n    setVisible: (v:boolean)=>void,\n    checkCourse: (c: string)=>boolean,\n    visible: (boolean),\n    catalog: (Record<string, Course>)}): JSX.Element {\n\n    // semester states\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(1);\n    const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n    const semesterInfo = {season, year, courseRecord, creditTotal, expectedTuition};\n\n    // course states\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<string[][]>([[]]);\n    const [coReqs, setCoReqs] = useState<string[][]>([[]]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([]);\n    const [preRequirements, setPreRequirements] = useState<boolean>(true);\n    const [coRequirements, setCoRequirements] = useState<boolean>(true);\n    const [courseInfo, setCourseInfo] = useState<Course>({department, courseID, title, description, credits, preReqs, coReqs, semestersOffered});\n\n    // course card states\n    const [showCard, setShowCard] = useState<boolean>(false);\n\n    // add semester modal states\n    const [showPreWarning, setShowPreWarning] = useState<boolean>(false);\n    const [showCoWarning, setShowCoWarning] = useState<boolean>(false);\n    const hide = ()=>setVisible(false);\n\n    function validateForm(): boolean { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100 && year >= determineYear();\n    }\n\n    function validateTable() {\n        return Object.values(courseRecord).length > 0 && checkSemester(semesterInfo) === -1 && coRequirements;\n    }\n\n    function validateCourse() {\n        return preRequirements && department != \"\" && courseID != 0 && title != \"\" && description != \"\" && credits != 0 && preReqs != [[]] && coReqs != [[]] \n        && semestersOffered != []  && semestersOffered.includes(season);\n    }\n\n    useEffect (() => {\n        setShowCoWarning(false);\n        validateCoRequirements();\n    }, [courseRecord]);\n\n    function validateCoRequirements(){\n        //Iterate through each course  \n        const courseArray: Course[] = Object.values(courseRecord);\n        let valid_course = true;\n        for (let i = 0; i < courseArray.length; i++){\n            //If there are no prerequisites, the course is valid, you can probably just break here.\n            if (courseArray[i].coReqs[0][0] == \"\"){\n                console.log(\"Coreqs is empty?\");\n                setCoRequirements(true);\n                return;\n            }\n\n            //We look in each prerequisite structure, which holds the keys we are looking for\n            for (let j = 0; j < courseArray[i].coReqs.length; j++){\n                //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n                console.log(courseArray[i].coReqs[j].length);\n                for (let h = 0; h < courseArray[i].coReqs[j].length; h++){\n                    //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                    console.log(courseArray[i].coReqs[j][h]);\n                    const temp: string = courseArray[i].coReqs[j][h];\n                    console.log(courseRecord[temp]);\n                    if (!courseRecord[temp]){\n                        console.log(\"not in plan\");\n                        valid_course = valid_course && false;\n                    }else{\n                        console.log(\"in plan\");\n                        valid_course = valid_course && true;\n                    }\n                }\n            }    \n            if (valid_course){\n                console.log(\"Valid Course.\");\n                setCoRequirements(true);\n            } else {\n                console.log(\"Invalid Course.\");\n                setShowCoWarning(true);\n                setCoRequirements(false);\n            }\n        }\n    }\n    \n    function validatePreRequirements(course: Course){\n        //Iterate through each course   \n        let valid_course = true;\n        //If there are no prerequisites, the course is valid, you can probably just break here.\n        if (course.preReqs[0][0] == \"\"){\n            console.log(\"Prereqs is empty?\");\n            setPreRequirements(true);\n            return;\n        }\n\n        //We look in each prerequisite structure, which holds the keys we are looking for\n        for (let j = 0; j < course.preReqs.length; j++){\n            //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n            for (let h = 0; h < course.preReqs[j].length; h++){\n                //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                console.log(course.preReqs[j][h]);\n                if (!checkCourse(course.preReqs[j][h])){\n                    console.log(\"not in plan\");\n                    valid_course = valid_course && false;\n                }else{\n                    console.log(\"in plan\");\n                    valid_course = valid_course && true;\n                }\n            }\n        }    \n        if (valid_course){\n            console.log(\"Valid Course.\");\n            setPreRequirements(true);\n        } else {\n            setShowPreWarning(true);\n            setPreRequirements(false);\n        }\n    }\n   \n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n\n        const key = department + courseID;\n\n        let course: Course = {\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            semestersOffered: []\n        };\n        \n        if(catalog[key]){\n            course = getCourse(department, courseID);\n            setCourseInfo(course);\n            setShowCard(true);\n        } else{\n            setShowCard(false);\n        }\n\n        setShowPreWarning(false);\n        validatePreRequirements(course);\n        setTitle(course.title);\n        setDescription(course.description);\n        setCredits(course.credits);\n        setPreReqs(course.preReqs);\n        setCoReqs(course.coReqs);\n        setSemestersOffered(course.semestersOffered);\n        \n    }\n\n    function addCourse(newCourse: Course){ \n        const courseKey: string = newCourse.department + newCourse.courseID;\n\n        setCourseRecord({...courseRecord, [courseKey]: newCourse});\n        setCreditTotal(determineCreditTotal(courseRecord));\n        setExpectedTuition(expectedTuition);\n    }\n\n    function getCourse(department: string, id: number): Course{\n        const name = department + id;\n        \n        return catalog[name];\n    }\n\n    function clearCourseRecord(){\n        setShowCoWarning(false);\n        setCourseRecord({});\n    }\n\n    function saveSemester(){\n        addSemester(semesterInfo);\n        clearData();\n        setShowCard(false);\n        hide();\n    }\n\n    function determineCreditTotal(record: Record<string, Course>) {\n        let i = 0;\n        let total = 0;\n        const keys = Object.keys(record); \n        const arr = [];\n\n        for(i = 0; i<keys.length; i++){\n            arr.push(record[keys[i]]);\n        }\n        \n        while(i != arr.length){\n            total += arr[i].credits;\n            i++;\n        }\n\n        return total;\n    }\n\n    function displayReqs(s: string[][]): string | undefined{\n        let i;\n        if(showCard && s != undefined){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \", \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        if(word === \"Fall\"){\n            setSeason(3);\n        } else if(word === \"Winter\"){\n            setSeason(0);\n        } else if(word === \"Spring\"){\n            setSeason(1);\n        } else if(word === \"Summer\"){\n            setSeason(2);\n        }\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseRecord({});\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([[\"\"]]);\n        setCoReqs([[\"\"]]);\n        setSemestersOffered([]);\n\n        //Course Card\n        setShowPreWarning(false);\n        setShowCard(false);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"xl\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"CourseID-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"add-course-button\" id=\"add-course-button\" onClick={()=>addCourse(courseInfo)} disabled={!validateCourse()}>\n                            Add\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\" placeholder=\"Year\"\n                            min={determineYear()}\n                            max={(determineYear() + 6)}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                {showPreWarning && \n                    <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                        </svg>\n                        <div style = {{ paddingLeft: 10 }}>\n                            You cannot add this course to your semester as it&apos;s prerequisite(s) has not been fufilled in a previous semester ({displayReqs(preReqs)})\n                        </div>\n                    </div>}\n                <Row>\n                    <Col>\n                        {showCard && <CourseCardDisplay courseInfo = {courseInfo} setCourseInfo = {setCourseInfo} showCard={showCard}></CourseCardDisplay>}\n                    </Col>\n                    <Col>\n                        <CardPool showCard={showCard}></CardPool>\n                    </Col>\n                </Row>\n                <Row>\n                    {showCoWarning && \n                    <div className=\"alert alert-warning d-flex align-items-center\" role=\"alert\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                        </svg>\n                        <div style = {{ paddingLeft: 10 }}>\n                            You cannot save this semester until you add the corequisites for your courses: {displayReqs(coReqs)}\n                        </div>\n                    </div>}\n                    <SemesterTable semester={{season, year, courseRecord, creditTotal, expectedTuition}} addCourse={addCourse}></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseRecord}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n/**\n * Creates a Card containing all of the Semester information (SemesterTable),\n * macro data such as cost of attendance and total credits, a deleteSemester \n * button, etc.\n * @param semester A semester.\n * @param deleteSemester Deletes a single semester from the plan.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Navbar\n */\nexport function SemesterCard({ semester, deleteSemester, editCourseLauncher, deleteCourse }: {\n    semester: Semester;\n    deleteSemester: (semester: Semester) => void;\n    editCourseLauncher: ({course, semester}: {course: Course, semester:Semester}) => void;\n    deleteCourse: ({course, semester}: {course: Course, semester:Semester}) => void;\n}): JSX.Element {\n    /**\n     * Gets the string value of a given Season enum.\n     * @param season A season enum.\n     *\n     * @returns {string} The passed in season's string value.\n     */\n    function getSeason(season: Season): string{\n        switch(season) {\n        case 3:\n            return \"Fall\";\n        case 0:\n            return \"Winter\";\n        case 1:\n            return \"Spring\";\n        case 2:\n            return \"Summer\";\n        default:\n            return \"Inproper Semester\";\n        }\n    }\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container>\n                    <Row>\n                        <div className=\"flex-container\">\n                            {/* <div className=\"left-semester-container\"></div> */}\n                            <div className=\"middle-semester-container\">\n                                <Col>\n                                    <h1>{\"Semester: \" + getSeason(semester.season) + \" \" + semester.year}</h1>\n                                </Col>\n                            </div>\n                            <div className=\"right-semester-container\">\n                                <Button variant=\"danger\" size=\"sm\" onClick={() => deleteSemester(semester)}>\n                                    Delete Semester\n                                </Button>\n                            </div>\n                        </div>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Courses:</Card.Title>\n                <Row>\n                    <SemesterTable\n                        semester={semester}\n                        editCourseLauncher={editCourseLauncher}\n                        deleteCourse={deleteCourse}\n                    ></SemesterTable>\n                </Row>\n                <p>PLACEHOLDER FOR SEMESTER STATS (TOT CREDITS, ESTIMATED COST, ETC)</p>\n            </Card.Body>\n            <Card.Footer>\n                {(semester.season % 2) && <Button variant=\"primary\">Add Semester: {getSeason((semester.season + 1) % 4)}</Button>}\n            </Card.Footer>\n        </Card>   \n    );\n}","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n/**\n * Renders the SemesterCards as a 2xn \"table\" in order, effectively creating\n * a viewable plan.\n * \n * @param semesters A list of semesters.\n * @param deleteSemester Deletes a single semester from the plan.\n * @param showModal Shows the AddSemesterModal.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n *\n * @returns {JSX.Element} A JSX.Element containing the rendered plan.\n */\nexport function PlanTable({ semesters, deleteSemester, showModal, editCourseLauncher, deleteCourse }: {\n    semesters: Semester[];\n    deleteSemester: (semester: Semester) => void;\n    showModal: (b:boolean) => void;\n    editCourseLauncher: ({course, semester}: {course: Course, semester:Semester}) => void;\n    deleteCourse: ({course, semester}: {course: Course, semester:Semester}) => void;\n}): JSX.Element {\n\n    const sortedSemesters = semesters.sort(compareSeason).sort(compareYear);\n\n    /**\n     * Calculates the difference between two semesters' years.\n     * @param a The first Semester.\n     * @param b The second Semester.\n     *\n     * @returns {number} Number of years between Semester a and Semester b.\n     */\n    function compareYear(a: Semester, b: Semester):number {\n        return a.year - b.year;\n    }\n\n    /**\n     * Calculates the difference between two semesters' seasons.\n     * @param a The first Semester.\n     * @param b The second Semester.\n     *\n     * @returns {number} Number of seasons between Semester a and Semester b.\n     */\n    function compareSeason(a: Semester, b: Semester):number {\n        return a.season - b.season;\n    }\n    \n    /**\n     * Creates a SemesterCard of a single Semester\n     * @param the_semester A Semester.\n     *\n     * @returns {JSX.Element} A SemesterCard for the_semester.\n     */\n    function renderList(the_semester: Semester): JSX.Element {\n        return (\n            <SemesterCard\n                key={the_semester.season.toString() + the_semester.year.toString()}\n                semester={the_semester} \n                deleteSemester={deleteSemester}\n                editCourseLauncher={editCourseLauncher}\n                deleteCourse={deleteCourse}\n            ></SemesterCard>\n        );\n    }\n\n    /**\n     * Renders a SemesterCard pair, or a SemesterCard and a AddSemester button\n     * on the PlanTable\n     * @param truncatedSemesterCardArray An array (of size 1 or 2) of SemesterCards,\n     * containing semesters from the plan.\n     *\n     * @returns {JSX.Element} A <Row> containing the SemesterCard pair / \n     * SemesterCard + AddSemester button.\n     */\n    function listDisplay(truncatedSemesterCardArray: JSX.Element[]): JSX.Element {\n\n        if (!(truncatedSemesterCardArray.length % 2)) {\n            return (\n                <Row key={truncatedSemesterCardArray[0].key}>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                        {truncatedSemesterCardArray[1]}\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <Row key={truncatedSemesterCardArray[0].key}>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                    </Col>\n                </Row>\n            );\n        }\n    }\n\n    const semesterJSX: JSX.Element[] = sortedSemesters.map(renderList);\n    semesterJSX.push(<Card><Button\n        className=\"button\"\n        data-testid=\"add-semester-button-plan-table\"\n        id=\"add-semester-button-plan-table\"\n        onClick={()=>showModal(true)}>Add Semester</Button></Card>);\n    const semesterPairs: JSX.Element[][] = [];\n\n    for(let i = 0; i < semesterJSX.length; i += 2) {\n        semesterPairs.push(semesterJSX.slice(i, i + 2));\n    }\n    \n\n    return (\n        <div className=\"plan-table\" id=\"plan-table\">\n            {semesterPairs.map(listDisplay)}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, ModalFooter } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\n/**\n * Creates a Modal that contains a Form (with verification) to edit a given Course.\n * @param setEditCourseVisible Sets the visibility of EditCourseModal.\n * @param editCourseVisible Visibility of EditCourseModal.\n * @param course A course.\n * @param setCurrentCourse Sets the current course that is being edited.\n * @param editCourse Removes the course that has been edited and adds the \n * updated course in its place.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Modal with embedded Form.\n */\nexport function EditCourseModal({ setEditCourseVisible, editCourseVisible, course, editCourse}: {\n    setEditCourseVisible: (b:boolean) => void;\n    editCourseVisible: boolean;\n    course: Course;\n    setCurrentCourse: (c:Course) => void;\n    editCourse: (c:Course) => void;\n}): JSX.Element {\n\n    const [newCourse, setNewCourse] = useState<Course>(course);\n\n    const [validated, setValidated] = useState(false);\n    const hide = ()=>setEditCourseVisible(false);\n\n    function resetCourseHooks(): void {\n        setNewCourse({\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            semestersOffered: []\n        });\n    }\n \n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>):void => {\n        event.preventDefault();\n        const form: HTMLFormElement = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            setValidated(true);\n            const inputValueArray: string[] = new Array(form.elements.length - 1);\n            for (let i = 0; i<form.elements.length - 1; i++) { // -1 is to remove the button\n                const copyElement: HTMLInputElement = form.elements[i] as HTMLInputElement;\n                inputValueArray[i] = copyElement.value;\n            }\n            console.log(inputValueArray);\n            const updateNewCourse: Course = {\n                department: inputValueArray[0],\n                courseID: parseInt(inputValueArray[1]),\n                title: inputValueArray[2],\n                description: inputValueArray[3],\n                credits: parseInt(inputValueArray[4]),\n                preReqs: course.preReqs,\n                coReqs: course.coReqs,\n                semestersOffered: course.semestersOffered\n            };\n            setNewCourse(updateNewCourse);\n        }\n        \n    };\n\n    function saveCourse() {\n        console.log(newCourse);\n        editCourse(newCourse);\n        resetCourseHooks();\n        setValidated(false);\n        hide();\n    }\n\n    return(\n        <Modal\n            data-testid=\"edit-course-modal\"\n            show={editCourseVisible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            size=\"lg\">\n            <ModalHeader closeButton onClick={resetCourseHooks}>\n                <Modal.Title>Edit {course.department + course.courseID}</Modal.Title>\n            </ModalHeader>\n\n            <ModalBody>\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationDepartment\">\n                            <Form.Label>Department</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"ABCD or ABC\"\n                                defaultValue={course.department}\n                                minLength={3}\n                                maxLength={4}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Department!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Department! Please provide a 3-4 \n                                character long Department tag (ex. ENGL)\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCourseID\">\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"number\"\n                                placeholder=\"123\"\n                                defaultValue={course.courseID}\n                                pattern=\"\\d*\"\n                                minLength={3}\n                                maxLength={3}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Course ID!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Course ID! Please include a 3 digit Course ID (ex. 123). \n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationTitle\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"Introduction to Course Registration\"\n                                defaultValue={course.title}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Title!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Title! Please include a valid title (ex. Introduction to Course Registration). \n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"validationDescription\">\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control\n                                required\n                                as=\"textarea\"\n                                style={{ height: \"100px\" }}\n                                type=\"text\"\n                                placeholder={(\"Principles of how to plan a schedule, incluing how breadths work, what\" +\n                                    \"BlueHenPlanner is and how it works, where to find your registration appointment\" +\n                                    \"date and time, etc.\")}\n                                defaultValue={course.description}\n                            />\n                            <Form.Control.Feedback>\n                                Valid description!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid description.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationCredits\">\n                            <Form.Label>Credits</Form.Label>\n                            <Form.Control\n                                required\n                                as=\"select\"\n                                aria-label=\"Floating label select example\"\n                                type=\"number\"\n                                defaultValue={course.credits}\n                            >\n                                <option value={0}>0</option>\n                                <option value={1}>1</option>\n                                <option value={2}>2</option>\n                                <option value={3}>3</option>\n                                <option value={4}>4</option>\n                                <option value={5}>5</option>\n                                <option value={6}>6</option>\n                            </Form.Control>\n                            <Form.Control.Feedback>\n                                Valid credit total!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid credit total between 1 and 9.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationSemestersOffered\">\n                            <Form.Label>Semesters Offered</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                defaultValue={course.semestersOffered.toString()}                            \n                            />\n                            <Form.Control.Feedback>\n                                Valid Semesters!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide valid Semester(s) offered (ex. Fall, Spring).\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Button\n                        variant=\"primary\"\n                        type=\"submit\"\n                    >Check Course Changes</Button>\n                </Form>\n            </ModalBody>\n            <ModalFooter>\n                {validated && <Button\n                    className=\"button\"\n                    id=\"save-course-button\"\n                    onClick={saveCourse}>Save Course</Button>}\n            </ModalFooter>\n        </Modal>\n    );\n}","import React from \"react\";\n\nexport function RequiredDegreeList({degree_list}: {degree_list: string[]}): JSX.Element{\n    \n    function createList(course: string){\n        return(\n            <a className=\"list-group-item list-group-item-action\" key = {course}> {course} </a>\n        );\n    }\n\n    return(\n        <div className=\"list-group w-25\" id = \"degree_requirements\">\n            <a className=\"list-group-item list-group-item-action active\"> Required Courses </a>\n            {degree_list.map(createList)}\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/University_of_Delaware_wordmark.99b5a349.svg\";","import React, { Navbar, Nav, NavDropdown, Container } from \"react-bootstrap\";\nimport UDLogo from \"../Assets/University_of_Delaware_wordmark.svg\";\n/**\n * Creates a Navbar that contains the University of Delaware logo, a \n * deleteAllSemesters button, a DropDown with upload and download csv. buttons, \n * etc.\n * @param deleteAllSemesters Deletes all semesters from the plan.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Navbar\n */\nexport function SchedulerNavbar({deleteAllSemesters}: {deleteAllSemesters: () => void}): JSX.Element {\n    return (\n        <Navbar\n            data-testid=\"scheduler-navbar\"\n            bg=\"light\"\n            variant=\"light\"\n            sticky=\"top\"\n            expand=\"xxl\">\n            <Container>\n                <Navbar.Brand href=\"#home\">\n                    <img\n                        alt=\"UD Logo\"\n                        src={UDLogo}\n                        width=\"140px\"\n                        height=\"60px\"\n                        className=\"img-responsive\"\n                    />\n                    {\"\"}\n                </Navbar.Brand>\n                <Nav className=\"sch-nav\" justify={true}>\n                    <Nav.Item>\n                        <Nav.Link \n                            id=\"delete-all-semesters-nav\"\n                            onClick = {() => deleteAllSemesters()}\n                        >Delete All Semesters</Nav.Link>\n                    </Nav.Item>\n                    <NavDropdown title=\"scheduleDropdown\" id=\"sch-dropdown\">\n                        <NavDropdown.Item eventKey=\"downloadcsv\">Download as .csv</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"uploadcsv\">Upload .csv</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item eventKey=\"loadgeneric\">Load Generic Plan</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Nav.Link\n                    className=\"ud-catalog-link\"\n                    href=\"https://catalog.udel.edu/\"\n                    target=\"_blank\"\n                >\n                    <strong>UD Catalog</strong>\n                </Nav.Link>\n            </Container>\n        </Navbar>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Course } from \"./interface/course\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\nimport { EditCourseModal } from \"./Components/EditCourseModal\";\nimport { RequiredDegreeList } from \"./Components/RequiredDegreeList\";\n\nimport courseCatalog from \"./Assets/testcourses.json\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { SchedulerNavbar } from \"./Components/SchedulerNavbar\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n    const catalog: Record<string, Course> = courseCatalog;\n    const [degreePlan, setDegreePlan] = useState<string[]>([\"CISC210\", \"MATH241\"]);\n    const [requiredCourses, setRequiredCourses] = useState<string[]>(degreePlan);\n\n    const [editCourseVisible, setEditCourseVisible] = useState<boolean>(false);\n    const [currentCourse, setCurrentCourse] = useState<Course>({\n        department: \"\",\n        courseID: 0,\n        title: \"\",\n        description: \"\",\n        credits: 0,\n        preReqs: [[\"\"]],\n        coReqs: [[\"\"]],\n        semestersOffered: []\n    });\n    const [semesterIndex, setSemesterIndex] = useState<number>(0);\n\n    useEffect (() => {\n        checkDegreePlan();\n    }, [plan]);\n    \n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        //just to bypass the linter warning, remove later\n        setDegreePlan(degreePlan);\n\n        setPlan([]);\n        console.log(\"Deleted All Semesters\");\n    }\n\n    function checkCourse(course: string): boolean {\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(plan[i].courseRecord[course]){\n                return true;\n            }\n        }\n        return false;\n    }\n    function editCourse(course: Course) {\n        const editSemesterIndex: number = semesterIndex;\n        delete plan[editSemesterIndex].courseRecord[currentCourse.department + currentCourse.courseID];\n        plan[editSemesterIndex].courseRecord = {...plan[editSemesterIndex].courseRecord, [course.department + course.courseID]: course};\n        setPlan([...plan]);\n    }\n\n    function deleteCourse({course, semester}: {\n        course: Course;\n        semester: Semester;\n    }): void {\n        const deleteSemesterIndex: number = checkSemester(semester);\n        delete plan[deleteSemesterIndex].courseRecord[course.department + course.courseID];\n        setPlan([...plan]);\n    }\n\n    function editCourseLauncher({course, semester}: {\n        course: Course;\n        semester: Semester;\n    }): void {\n        setSemesterIndex(checkSemester(semester));\n        setCurrentCourse(course);\n        setEditCourseVisible(true);\n    }\n\n    function deleteSemester(semester: Semester) {\n        let deleteSemesterIndex = 0;\n        for(let i = 0; i < plan.length; i++) {\n            if(semester.season === plan[i].season && semester.year === plan[i].year) {\n                deleteSemesterIndex = i;\n            }\n        }\n        const newPlan = [...plan];\n        newPlan.splice(deleteSemesterIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    function checkDegreePlan() {\n        let violations: string[] = [];\n        for (let i = 0; i < degreePlan.length; i++){\n            //console.log(\"TESTING \" + degreePlan[i]);\n            //console.log(checkCourse(degreePlan[i]));\n            if (!checkCourse(degreePlan[i])){\n                const course: string = degreePlan[i];\n                violations = [...violations, course];\n            }\n        } \n        //It seems that useState does not like trying to set its variable in a loop multiple times\n        setRequiredCourses(violations);\n    }\n    function checkSemester(semesterToCheck: Semester): number {\n        for(let semesterIndex = 0; semesterIndex<plan.length; semesterIndex++){\n            if(semesterToCheck.year === plan[semesterIndex].year && semesterToCheck.season === plan[semesterIndex].season)\n                return semesterIndex;\n        }\n        return -1;\n    }\n\n    return (\n        <DndProvider backend = {HTML5Backend}>\n            <Container className=\"App\">\n                <header></header>\n                <SchedulerNavbar deleteAllSemesters={deleteAllSemesters}></SchedulerNavbar>\n                <Row>\n                    <AddSemesterModal\n                        addSemester={addSemester}\n                        checkSemester={checkSemester}\n                        setVisible={setVisible}\n                        checkCourse={checkCourse}\n                        visible={visible}\n                        catalog={catalog}\n                    ></AddSemesterModal>\n                    <EditCourseModal\n                        setEditCourseVisible={setEditCourseVisible}\n                        editCourseVisible={editCourseVisible}\n                        course={currentCourse}\n                        setCurrentCourse={setCurrentCourse}\n                        editCourse={editCourse}\n                    ></EditCourseModal>\n                    <RequiredDegreeList\n                        degree_list={requiredCourses}\n                    ></RequiredDegreeList>\n                </Row>\n                <Row>\n                    <PlanTable\n                        semesters={plan}\n                        deleteSemester={deleteSemester}\n                        showModal={setVisible}\n                        editCourseLauncher={editCourseLauncher}\n                        deleteCourse={deleteCourse}\n                    ></PlanTable>\n                </Row>\n                <Row>\n                </Row>\n            </Container>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}