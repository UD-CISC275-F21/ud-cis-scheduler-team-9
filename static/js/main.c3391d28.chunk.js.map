{"version":3,"sources":["Components/ControlPanel.tsx","Components/SemesterTable.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","showModal","deleteAllSemesters","Col","Row","Button","className","id","onClick","variant","SemesterTable","semester","getSeason","season","Table","scope","courseList","map","course","index","department","courseID","year","AddSemesterModal","addSemester","setVisible","visible","useState","setSeason","determineYear","setYear","setCourseList","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","setDepartment","setCourseID","title","setTitle","description","setDescription","credits","setCredits","preReqs","setPreReqs","coReqs","setCoReqs","semestersOffered","setSemestersOffered","hide","Date","getFullYear","determineSeason","word","clearData","Modal","show","onHide","backdrop","keyboard","size","ModalHeader","closeButton","ModalBody","Form","onSubmit","event","preventDefault","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","type","min","valueAsNumber","disabled","length","FormCheck","inline","name","label","checked","e","FormControl","SemesterCard","deleteSemester","Card","bg","Header","Container","fluid","Body","Title","Footer","PlanTable","semesters","the_semester","App","plan","setPlan","console","log","deleteIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3391d28.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\n\nexport function ControlPanel({showModal, deleteAllSemesters}: {showModal: (b:boolean)=>void, deleteAllSemesters: () => void}): JSX.Element{\n\n    return (\n        <Col data-testid=\"Control Panel\">\n            <Row>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button className=\"button\" data-testid=\"add-semester-button\" id=\"add-semester-button\" onClick={()=>showModal(true)}>Add Semester</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                    <Button className=\"button\" variant=\"danger\" id=\"delete-all-button\" onClick = {() => deleteAllSemesters()}>Delete All Semesters</Button>\n                </Col>\n            </Row>\n        </Col>\n    );\n}","import React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n\nexport function SemesterTable({semester}: {semester: (Semester)}): JSX.Element {\n\n    function getSeason(){\n        switch(semester.season) {\n        case 0:\n            return \"Fall\";\n        case 1:\n            return \"Winter\";\n        case 2:\n            return \"Spring\";\n        case 3:\n            return \"Summer\";\n        }\n    }\n\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"semester-season\">{getSeason()}</td>\n                <td id=\"semester-year\">{semester.year}</td>\n            </tr>\n        );\n    }\n\n    return (\n        <Table id=\"semester-table\">\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Season</th>\n                    <th scope=\"col\">Year</th>\n                </tr>\n            </thead>\n            <tbody>\n                {semester.courseList.map(renderList)}\n            </tbody>\n        </Table>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function AddSemesterModal({ addSemester, setVisible, visible}:{\n    addSemester: (s: Semester)=>void,\n    setVisible: (v:boolean)=>void,\n    visible: (boolean)}): JSX.Element {\n\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(determineYear());\n    const [courseList, setCourseList] = useState<Course[]>([]);\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<Course[]>([]);\n    const [coReqs, setCoReqs] = useState<Course[]>([]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([1]);\n\n\n    const hide = ()=>setVisible(false);\n\n    /* implement with drag function\n    function addCourse(course: Course){\n        setCourseList([...courseList, course]); \n    }*/\n\n    function validateForm() { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100 && year >= determineYear();\n    }\n\n    function validateTable() {\n        return courseList.length;\n    }\n\n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n        // For now this adds the courses to the table via the last call, \n        // in the future it will just search for a class to display before they decide to drag it into the table or not\n        // \n        //These set calls below are just place holders so the code will build\n        setCreditTotal(0);\n        setExpectedTuition(0);\n\n        setTitle(\"\");\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([]);\n        setCoReqs([]);\n        setSemestersOffered([1]);\n\n        setCourseList([...courseList, {department, courseID, title, description, credits, preReqs, coReqs, semestersOffered}]);\n    }\n\n    function clearCourseList(){\n        setCourseList([]);\n    }\n\n    function saveSemester(){\n        addSemester({season, year, courseList, creditTotal, expectedTuition});\n        clearData();\n        hide();\n    }\n\n    /*function determineCreditTotal({list}: {list: Course[]}) {\n        var i = 0;\n        var total = 0;\n        while(i != list.length){\n            total += list[i].credits;\n            i++\n        }\n    }*/\n\n    /*function addCourse(course: Course){\n        setCourseList([...courseList, course]);\n        determineCreditTotal(courseList);\n    }*/\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        if(word === \"Fall\"){\n            setSeason(0);\n        } else if(word === \"Winter\"){\n            setSeason(1);\n        } else if(word === \"Spring\"){\n            setSeason(2);\n        } else if(word === \"Summer\"){\n            setSeason(3);\n        }\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseList([]);\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([]);\n        setCoReqs([]);\n        setSemestersOffered([]);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"lg\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"CourseID-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\"\n                            min={determineYear()}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <SemesterTable semester={{season, year, courseList, creditTotal, expectedTuition}}></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseList}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Table, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function SemesterCard({ semester, deleteSemester }: {\n    semester: Semester;\n    deleteSemester: (deleteIndex: number) => void;\n}): JSX.Element {\n\n\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container fluid>\n                    <Row>\n                        <div className=\"flex-container\">\n                            <div className=\"left-semester-container\"></div>\n                            <div className=\"middle-semester-container\">\n                                Semester\n                            </div>\n                            <div className=\"right-semester-container\">X</div>\n                        </div>\n                        <Col></Col>\n                        <Col>\n                            <h1>[test]</h1>\n                        </Col>\n                        <Col>\n                            <Button variant=\"danger\" onClick={() => deleteSemester(0)}>\n                                Delete Semester\n                            </Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Special title treatment</Card.Title>\n                <Table>\n                    <SemesterTable semester={semester}></SemesterTable>\n                </Table>\n                <p>hello</p>\n                <Button variant=\"primary\">Go somewhere</Button>\n            </Card.Body>\n            <Card.Footer className=\"text-muted\">2 days ago</Card.Footer>\n        </Card>\n    );\n}","import React from \"react\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n\nexport function PlanTable({ semesters, deleteSemester }: {\n    semesters: Semester[];\n    deleteSemester: (deleteIndex: number) => void;\n}): JSX.Element {\n\n    function renderList(the_semester: Semester) {\n        return (\n            <SemesterCard semester={the_semester} deleteSemester = {deleteSemester}></SemesterCard>\n        );\n    }\n\n    return (\n        <div className=\"plan-table\">\n            {semesters.map(renderList)}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { ControlPanel } from \"./Components/ControlPanel\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n\n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        setPlan([]);\n        console.log(\"Deleted All Semesters\");\n    }\n\n    function deleteSemester(deleteIndex: number) {\n        const newPlan = [...plan];\n        newPlan.splice(deleteIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    return (\n        <Container className=\"App\">\n            <Row>\n                <br></br>\n            </Row>\n            <Row>\n                <ControlPanel showModal={setVisible} deleteAllSemesters={deleteAllSemesters}></ControlPanel>\n            </Row>\n            <Row>\n                <AddSemesterModal addSemester={addSemester} setVisible={setVisible} visible={visible}></AddSemesterModal>\n            </Row>\n            <Row>\n                <PlanTable semesters = {plan} deleteSemester = {deleteSemester}></PlanTable>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}