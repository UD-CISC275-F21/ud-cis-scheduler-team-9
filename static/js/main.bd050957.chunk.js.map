{"version":3,"sources":["Components/ControlPanel.tsx","Components/SemesterTable.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","showModal","deleteAllSemesters","Col","Row","Button","className","id","onClick","variant","SemesterTable","semester","Table","scope","Object","values","courseRecord","map","course","index","department","courseID","title","description","credits","AddSemesterModal","addSemester","checkSemester","setVisible","visible","catalog","useState","season","setSeason","determineYear","year","setYear","setCourseRecord","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","semesterInfo","setDepartment","setCourseID","setTitle","setDescription","setCredits","preReqs","setPreReqs","coReqs","setCoReqs","semestersOffered","setSemestersOffered","courseInfo","showCard","setShowCard","hide","addCourse","newCourse","courseKey","record","i","total","keys","arr","length","push","determineCreditTotal","Date","getFullYear","determineSeason","word","displayReqs","s","phrase","clearData","Modal","show","onHide","backdrop","keyboard","size","ModalHeader","closeButton","ModalBody","Form","onSubmit","event","preventDefault","getCourse","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","type","min","valueAsNumber","disabled","FormCheck","inline","name","label","checked","e","FormControl","placeholder","Card","Body","Title","Text","forEach","displaySemesters","SemesterCard","deleteSemester","getSeason","bg","Header","Container","Footer","PlanTable","semesters","sortedSemesters","sort","a","b","the_semester","App","plan","setPlan","courseCatalog","console","log","semesterToCheck","deleteIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd050957.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\n\nexport function ControlPanel({showModal, deleteAllSemesters}: {showModal: (b:boolean)=>void, deleteAllSemesters: () => void}): JSX.Element{\n\n    return (\n        <Col data-testid=\"control-panel\">\n            <Row>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button className=\"button\" data-testid=\"add-semester-button\" id=\"add-semester-button\" onClick={()=>showModal(true)}>Add Semester</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                    <Button className=\"button\" variant=\"danger\" id=\"delete-all-semesters-button\" onClick = {() => deleteAllSemesters()}>Delete All Semesters</Button>\n                </Col>\n            </Row>\n        </Col>\n    );\n}","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n\nexport function SemesterTable({semester}: {semester: (Semester)}): JSX.Element {\n\n\n\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"course-title\">{course.title}</td>\n                <td id=\"course-description\">{course.description}</td>\n                <td id=\"course-credits\">{course.credits}</td>\n                <td id=\"course-edit-button\">{\n                    <Button variant=\"primary\">\n                        Edit Course\n                    </Button>\n                }</td>\n            </tr>\n        );\n    }\n\n    return (\n        <Table id=\"semester-table\">\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credits</th>\n                    <th scope=\"col\">Edit:</th>\n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(semester.courseRecord).map(renderList)}\n            </tbody>\n        </Table>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl, Card} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function AddSemesterModal({ addSemester, checkSemester, setVisible, visible, catalog}:{\n    addSemester: (s: Semester)=>void,\n    checkSemester: (c: Semester)=>boolean,\n    setVisible: (v:boolean)=>void,\n    visible: (boolean)\n    catalog: (Record<string, Course>)}): JSX.Element {\n\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(determineYear());\n    const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n    const semesterInfo = {season, year, courseRecord, creditTotal, expectedTuition};\n\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<string[][]>([[]]);\n    const [coReqs, setCoReqs] = useState<string[][]>([[]]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([]);\n    const courseInfo = {department, courseID, title, description, credits, preReqs, coReqs, semestersOffered};\n\n    const [showCard, setShowCard] = useState<boolean>(false);\n    const hide = ()=>setVisible(false);\n\n    function validateForm(): boolean { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100 && year >= determineYear();\n    }\n\n    function validateTable() {\n        return Object.values(courseRecord).length > 0 && !checkSemester(semesterInfo);\n    }\n\n    function validateCourse() {\n        return department != \"\" && courseID != 0 && title != \"\" && description != \"\" && credits != 0 && preReqs != [[]] && coReqs != [[]] && semestersOffered != [];\n    }\n\n\n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n\n        const key = department + courseID;\n\n        let course: Course = {\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            semestersOffered: []\n        };\n        \n        if(catalog[key]){\n            course = getCourse(department, courseID);\n            setShowCard(true);\n            \n        }\n\n        setTitle(course.title);\n        setDescription(course.description);\n        setCredits(course.credits);\n        setPreReqs(course.preReqs);\n        setCoReqs(course.coReqs);\n        setSemestersOffered(course.semestersOffered);\n    }\n\n    function addCourse(newCourse: Course){ \n        const courseKey: string = department + courseID;\n\n        setCourseRecord({...courseRecord, [courseKey]: newCourse});\n        setCreditTotal(determineCreditTotal(courseRecord));\n        setExpectedTuition(expectedTuition);\n    }\n\n    function getCourse(department: string, id: number): Course{\n        const name = department + id;\n        \n        return catalog[name];\n    }\n\n    /*function checkCourse(course: string): boolean {\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(plan[i].courseRecord[course]){\n                return true;\n            }\n        }\n        return false;\n    }*/\n\n    function clearCourseRecord(){\n        setCourseRecord({});\n    }\n\n    function saveSemester(){\n        addSemester(semesterInfo);\n        clearData();\n        setShowCard(false);\n        hide();\n    }\n\n    function determineCreditTotal(record: Record<string, Course>) {\n        let i = 0;\n        let total = 0;\n        const keys = Object.keys(record); \n        const arr = [];\n\n        for(i = 0; i<keys.length; i++){\n            arr.push(record[keys[i]]);\n        }\n        \n        while(i != arr.length){\n            total += arr[i].credits;\n            i++;\n        }\n        return total;\n    }\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        if(word === \"Fall\"){\n            setSeason(0);\n        } else if(word === \"Winter\"){\n            setSeason(1);\n        } else if(word === \"Spring\"){\n            setSeason(2);\n        } else if(word === \"Summer\"){\n            setSeason(3);\n        }\n    }\n\n    function displayReqs(s: string[][]){\n        let i;\n        if(showCard){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \", \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n    \n    function displaySemesters(){\n        let i = 0;\n        let phrase = \"\";\n        semestersOffered.forEach((s)=>{\n            switch(s){\n            case 0:\n                phrase = phrase + \"Fall\";\n                break;\n            case 1:\n                phrase = phrase + \"Winter\";\n                break;\n            case 2:\n                phrase = phrase + \"Spring\";\n                break;\n            case 3:\n                phrase = phrase + \"Summer\";\n                break;\n            }\n            \n            i++;\n            if(i<semestersOffered.length)\n                phrase = phrase + \", \";\n        });\n        return phrase;\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseRecord({});\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([[\"\"]]);\n        setCoReqs([[\"\"]]);\n        setSemestersOffered([]);\n\n        setShowCard(false);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"lg\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"CourseID-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"add-course-button\" id=\"add-course-button\" onClick={()=>addCourse(courseInfo)} disabled={!validateCourse()}>\n                            Add\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\" placeholder=\"Year\"\n                            min={determineYear()}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    {showCard && <Card id=\"course-card\">\n                        <Card.Body>\n                            <Card.Title>{department}{courseID}: {title} \n                                <Card.Text> Credits: {credits}</Card.Text>\n                            </Card.Title> \n                            <Card.Text>{description}</Card.Text>\n                            <Card.Text>Prereqs: {displayReqs(preReqs)}</Card.Text> \n                            <Card.Text>Coreqs: {displayReqs(coReqs)}</Card.Text> \n                            <Card.Text>Semesters: {displaySemesters()}</Card.Text>\n                        </Card.Body>\n                    </Card>}\n                </Row>\n                <Row>\n                    <SemesterTable semester={{season, year, courseRecord, creditTotal, expectedTuition}}></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseRecord}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Table, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function SemesterCard({ semester, deleteSemester }: {\n    semester: Semester;\n    deleteSemester: (deleteIndex: number) => void;\n}): JSX.Element {\n\n\n    function getSeason(season: Season): string{\n        switch(season) {\n        case 0:\n            return \"Fall\";\n        case 1:\n            return \"Winter\";\n        case 2:\n            return \"Spring\";\n        case 3:\n            return \"Summer\";\n        default:\n            return \"Inproper Semester\";\n        }\n    }\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container>\n                    <Row>\n                        <div className=\"flex-container\">\n                            {/* <div className=\"left-semester-container\"></div> */}\n                            <div className=\"middle-semester-container\">\n                                <Col>\n                                    <h1>{\"Semester: \" + getSeason(semester.season) + \" \" + semester.year}</h1>\n                                </Col>\n                            </div>\n                            <div className=\"right-semester-container\">\n                                <Button variant=\"danger\" onClick={() => deleteSemester(0)}>\n                                    Delete Semester\n                                </Button>\n                            </div>\n                        </div>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Courses:</Card.Title>\n                <Row>\n                    <Table>\n                        <SemesterTable semester={semester}></SemesterTable>\n                    </Table>\n                </Row>\n                <p>PLACEHOLDER FOR SEMESTER STATS (TOT CREDITS, ESTIMATED COST, ETC)</p>\n            </Card.Body>\n            <Card.Footer>\n                <Button variant=\"primary\">Add Semester: {getSeason(semester.season + 1)}</Button>\n            </Card.Footer>\n        </Card>   \n    );\n}","import React from \"react\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n\nexport function PlanTable({ semesters, deleteSemester }: {\n    semesters: Semester[];\n    deleteSemester: (deleteIndex: number) => void;\n}): JSX.Element {\n\n    const sortedSemesters = semesters.sort(compareSeason).sort(compareYear);\n\n    function compareYear(a: Semester, b: Semester){\n        return a.year - b.year;\n    }\n\n    function compareSeason(a: Semester, b: Semester){\n        return a.season - b.season;\n    }\n\n    function renderList(the_semester: Semester) {\n        return (\n            <SemesterCard semester={the_semester} deleteSemester = {deleteSemester}></SemesterCard>\n        );\n    }\n\n    return (\n        <div className=\"plan-table\" id=\"plan-table\">\n            {sortedSemesters.map(renderList)}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { ControlPanel } from \"./Components/ControlPanel\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Course } from \"./interface/course\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\nimport courseCatalog from \"./Assets/testcourses.json\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n    const catalog: Record<string, Course> = courseCatalog;\n\n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        setPlan([]);\n        console.log(\"Deleted All Semesters\");\n    }\n\n    function deleteSemester(deleteIndex: number) {\n        const newPlan = [...plan];\n        newPlan.splice(deleteIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    function checkSemester(semesterToCheck: Semester): boolean{\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(semesterToCheck.year === plan[i].year && semesterToCheck.season === plan[i].season)\n                return true;\n        }\n        return false;\n    }\n\n    return (\n        <Container className=\"App\">\n            <Row>\n                <br></br>\n            </Row>\n            <Row>\n                <ControlPanel showModal={setVisible} deleteAllSemesters={deleteAllSemesters}></ControlPanel>\n            </Row>\n            <Row>\n                <AddSemesterModal addSemester={addSemester} checkSemester={checkSemester} setVisible={setVisible} visible={visible} catalog={catalog}></AddSemesterModal>\n            </Row>\n            <Row>\n                <PlanTable semesters = {plan} deleteSemester = {deleteSemester}></PlanTable>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}