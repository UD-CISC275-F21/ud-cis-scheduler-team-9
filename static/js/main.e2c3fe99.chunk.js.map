{"version":3,"sources":["Components/CourseCard.tsx","Components/CardPool.tsx","Components/CourseCardDisplay.tsx","Components/SemesterTable.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","Components/EditCourseModal.tsx","Components/RequiredDegreeList.tsx","Assets/University_of_Delaware_wordmark.svg","Assets/CSV-Functions.tsx","Assets/downloads.ts","Components/SchedulerNavbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CourseCard","cardInfo","setDeleteCard","showCard","hide","hideButton","useDrag","type","item","department","courseID","title","description","credits","preReqs","collect","monitor","isDragging","drag","Card","draggable","className","ref","style","opacity","Body","Title","Button","onClick","Text","s","i","undefined","phrase","length","displayReqs","CardPool","useState","pool","setPool","deleteCard","useDrop","accept","drop","find","course","handlePool","isOver","addToPoolRef","console","log","filter","courseCard","id","map","CourseCardDisplay","courseInfo","setCourseInfo","validatePreRequirements","dropEffect","handleDisplay","addToDisplay","SemesterTable","semester","editCourseLauncher","deleteCourse","addCourse","checkCourse","year","determineYear","Date","getFullYear","valid_course","j","h","handleCourse","addToTableRef","Table","scope","Object","values","courseRecord","index","substring","variant","size","AddSemesterModal","addSemester","checkSemester","setVisible","visible","catalog","season","setSeason","setYear","setCourseRecord","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","semesterInfo","setDepartment","setCourseID","setTitle","setDescription","setCredits","setPreReqs","preRequirements","setPreRequirements","fufills","setFufills","setShowCard","showPreWarning","setShowPreWarning","newCourse","courseKey","record","total","courses","determineCreditTotal","determineSeason","word","clearData","Modal","show","onHide","backdrop","keyboard","ModalHeader","closeButton","ModalBody","Row","Form","onSubmit","event","preventDefault","getCourse","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","min","valueAsNumber","disabled","Col","FormCheck","inline","name","label","checked","e","FormControl","placeholder","max","role","xmlns","width","height","fill","viewBox","d","paddingLeft","SemesterCard","deleteSemester","getSeason","bg","Header","Container","Footer","PlanTable","semesters","showModal","semesterJSX","sort","a","b","the_semester","toString","push","semesterPairs","slice","truncatedSemesterCardArray","key","EditCourseModal","setEditCourseVisible","editCourseVisible","editCourse","setNewCourse","validated","setValidated","resetCourseHooks","noValidate","form","currentTarget","checkValidity","stopPropagation","inputValueArray","Array","elements","copyElement","updateNewCourse","parseInt","md","controlId","required","defaultValue","Feedback","pattern","ModalFooter","RequiredDegreeList","degree_plan","degree_list","popover_description","popover_header","includes","popover","Popover","OverlayTrigger","placement","overlay","CSVExport","plan","content","filename","contentType","blob","Blob","url","URL","createObjectURL","pom","document","createElement","href","setAttribute","click","downloadBlob","emptyRow","semesterHeaders","courseHeaders","num","reqFormatter","ret","p","produceCourseData","courseData","join","produceSemesterData","formatter","Intl","NumberFormat","currency","row","format","extractAsCSV","SchedulerNavbar","deleteAllSemesters","setDegreePlan","setDegreeRequirements","degree_plan_list","Navbar","sticky","expand","Brand","alt","src","UDLogo","Nav","justify","Item","Link","NavDropdown","keys","eventKey","updateDegree","App","setPlan","courseCatalog","degreePlan","degreePlanList","degreeRequirements","currentCourse","setCurrentCourse","semesterIndex","setSemesterIndex","split","requirement","nondigits","RegExp","credits_needed","replace","credit_count","course_array","semesterToCheck","forEach","json_course","course_entry","courseID_split","title_split","prereqs","prereq","fufilled_breadth","substr","DndProvider","backend","HTML5Backend","editSemesterIndex","deleteSemesterIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e2c3fe99.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { Button, Card } from \"react-bootstrap\";\n\nexport function CourseCard({cardInfo, setDeleteCard, showCard, hide, hideButton}: {\n    cardInfo: Course,\n    setDeleteCard:(c:Course | undefined) => void, \n    showCard: boolean,\n    hide: boolean,\n    hideButton: boolean}): JSX.Element{\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: \"courseCard\",\n        item: { \n            department: cardInfo.department, \n            courseID: cardInfo.courseID, \n            title: cardInfo.title, \n            description: cardInfo.description, \n            credits: cardInfo.credits, \n            preReqs: cardInfo.preReqs,\n        },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    }), [cardInfo.department, cardInfo.courseID]);\n\n    function displayReqs(s: string[][]): string | undefined{\n        let i;\n        if(showCard && s != undefined){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \", \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n    \n    return (\n        <Card draggable data-testid=\"course-card\" className = \"draggable-card\" ref={drag} style={{opacity: isDragging ? \"50%\" : \"100%\"}}>\n            <Card.Body>\n                <Card.Title>{cardInfo.department}{cardInfo.courseID}: {cardInfo.title} {!hideButton && <Button className=\"Danger\" data-testid=\"delete-button\" onClick={()=>setDeleteCard(cardInfo)}>-</Button>}\n                    <Card.Text> Credits: {cardInfo.credits}</Card.Text>\n                </Card.Title> \n                {!hide && <Card.Text>{cardInfo.description}</Card.Text>}\n                {!hide && <Card.Text>Prereqs: {displayReqs(cardInfo.preReqs)}</Card.Text>}\n            </Card.Body>\n        </Card>\n    );\n}","import React, { useState } from \"react\";\nimport { Course } from \"../interface/course\";\nimport { useDrop } from \"react-dnd\";\nimport { CourseCard } from \"./CourseCard\";\n\nexport function CardPool({showCard}: {showCard: boolean}): JSX.Element{\n    const [pool, setPool] = useState<Course[]>([]);\n    const [deleteCard, setDeleteCard] = useState<Course>();\n\n    const [{ isOver } , addToPoolRef] = useDrop({\n        accept: \"courseCard\",\n        drop: (item: Course) => handlePool(item),\n    });\n\n    function handlePool(item: Course){\n        if (!pool.find((course) => course.department === item.department && course.courseID === item.courseID)) {\n            setPool([...pool, item]);\n        }\n    }\n\n    if(deleteCard != undefined){\n        console.log(\"Hi\");\n        setPool(pool.filter(courseCard => courseCard.department + courseCard.courseID !== deleteCard.department + deleteCard.courseID));\n        setDeleteCard(undefined);\n    }\n\n    return (\n        <div data-testid=\"card-pool\" id = \"card-pool\" ref={addToPoolRef}>\n            {pool.map((courseCard, i) => \n                <div key={i}>\n                    <CourseCard data-testid=\"course-card\" cardInfo={courseCard} setDeleteCard={setDeleteCard} showCard={showCard} hide={true} hideButton={false}/>\n                </div>\n            )}\n            {isOver && console.log(\"over the card pool\")}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { CourseCard } from \"./CourseCard\";\n\n\nexport function CourseCardDisplay({courseInfo, setCourseInfo, showCard, validatePreRequirements}: {\n    courseInfo: Course, \n    setCourseInfo:(b: Course) => void, \n    showCard: boolean,\n    validatePreRequirements: (c: Course) => void}): JSX.Element{\n\n    const [deleteCard, setDeleteCard] = useState<Course>();\n    if(deleteCard != undefined)\n        setDeleteCard(undefined);\n\n    const [{ isOver }, addToDisplay] = useDrop(() => ({\n        accept: \"courseCard\",\n        item: { \n            department: courseInfo.department, \n            courseID: courseInfo.courseID, \n            title: courseInfo.title, \n            description: courseInfo.description, \n            credits: courseInfo.credits, \n            preReqs: courseInfo.preReqs\n        },\n        dropEffect: \"move\",\n        drop: (item: Course) =>  handleDisplay(item),\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n        }),\n    }), [courseInfo.department, courseInfo.courseID]);\n\n    function handleDisplay(item: Course){\n        if(courseInfo.department != item.department || courseInfo.courseID != item.courseID){\n            setCourseInfo(item);\n            validatePreRequirements(item);\n        }\n    }\n\n    return (\n        <div data-testid=\"course-card-display\" id = \"course-display\" ref={addToDisplay}>\n            {<CourseCard data-testid=\"course-card\" cardInfo={courseInfo} setDeleteCard={setDeleteCard} showCard={showCard} hide={false} hideButton={true}/>}\n            {isOver && console.log(\"over display\")}\n        </div>\n    );\n}","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { useDrop } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n/**\n * Formats the Courses in a Semester within a Table, adds Edit and Delete buttons\n * if called in PlanTable.\n * @param semester A semester.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n * @param addCourse Adds a course to the courseRecord.\n *\n * @returns {JSX.Element} A JSX.Element containing a table poplated with the\n * courses in a Semester.\n */\nexport function SemesterTable({semester, editCourseLauncher, deleteCourse, addCourse, checkCourse, year}: { \n    semester: (Semester);\n    editCourseLauncher?: ({course, semester}: {course: Course, semester:Semester}) => void,\n    deleteCourse?: ({course, semester}: {course: Course, semester:Semester}) => void,\n    addCourse?: (newCourse: Course) => void,\n    checkCourse?: (s: string) => boolean,\n    year?: number\n    }): JSX.Element {\n      \n    const [{ isOver } , addToTableRef] = useDrop({\n        accept: \"courseCard\",\n        drop: (item: Course) => {\n            handleCourse(item);\n        },\n    });\n\n    function handleCourse(item: Course): void{\n        function determineYear(){\n            const today = new Date();\n            return today.getFullYear();\n        }\n\n        function validatePreRequirements(course: Course): boolean{\n            //Iterate through each course   \n            let valid_course = true;\n            //If there are no prerequisites, the course is valid, you can probably just break here.\n            if (course.preReqs[0][0] == \"\"){\n                return false;\n            }\n            //We look in each prerequisite structure, which holds the keys we are looking for\n            for (let j = 0; j < course.preReqs.length; j++){\n                //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n                for (let h = 0; h < course.preReqs[j].length; h++){\n                    //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                    //console.log(course.preReqs[j][h]);\n                    if (checkCourse && !checkCourse(course.preReqs[j][h])){\n                        valid_course = false;\n                    }else{\n                        valid_course = true;\n                        break;\n                    }\n                }\n            }    \n            if (valid_course){\n                return true;\n            } else {\n                return false;\n            }\n        }\n        if(validatePreRequirements(item) && year && year >= determineYear()){\n            {addCourse && addCourse(item);}\n        }\n    }\n\n    /**\n    * Renders a single row in the table with a course's information.\n    * @param course A Course.\n    * @param index The index of the Course in the Semester.\n    *\n    * @returns {JSX.Element} A JSX.Element containing a <tr> with the course's\n    * name, title, description, credits, as well as an edit and delete button\n    * for the course if editCourseLauncher and deleteCourse are passed in.\n    */\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"course-title\">{course.title}</td>\n                <td id=\"course-description\">{course.description.substring(0, 50) + \"...\"}</td>\n                <td id=\"course-credits\">{course.credits}</td>\n                {editCourseLauncher && \n                <td id=\"course-edit-button\">\n                    <Button\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => editCourseLauncher({course, semester})}\n                    >Edit Course</Button>  \n                </td>}\n                {deleteCourse &&\n                <td>\n                    <Button\n                        variant=\"danger\"\n                        className=\"btn-block\"\n                        size=\"sm\"\n                        onClick={() => deleteCourse({course, semester})}\n                    >Delete Course</Button>\n                </td>}\n            </tr>\n        );\n    }\n\n    return (\n        <Table data-testid = \"semester-table\" id=\"semester-table\" ref={addToTableRef}>\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credits</th>\n                    {editCourseLauncher && <th scope=\"col\">Edit:</th>}\n                    {editCourseLauncher && <th scope=\"col\">Delete:</th>} \n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(semester.courseRecord).map(renderList)}\n            </tbody>\n            {isOver && console.log(\"over table\")}\n        </Table>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport { CardPool } from \"./CardPool\";\nimport { CourseCardDisplay } from \"./CourseCardDisplay\";\n\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\n\n/*Commented out the instances of checkSemester calls until we know how we want to handle it ()*/\nexport function AddSemesterModal({ addSemester, checkSemester, setVisible, checkCourse, visible, catalog}:{\n    addSemester: (s: Semester)=>void,\n    checkSemester: (c: Semester)=>number,\n    setVisible: (v:boolean)=>void,\n    checkCourse: (c: string)=>boolean,\n    visible: (boolean),\n    catalog: (Record<string, Course>)}): JSX.Element {\n\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(1);\n    const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n    const semesterInfo = {season, year, courseRecord, creditTotal, expectedTuition};\n\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<string[][]>([[]]);\n    const [preRequirements, setPreRequirements] = useState<boolean>(true);\n    const [fufills, setFufills] = useState<string>(\"\");\n    const [courseInfo, setCourseInfo] = useState<Course>({department, courseID, title, description, credits, preReqs, fufills});\n\n    const [showCard, setShowCard] = useState<boolean>(false);\n    // add semester modal states\n    const [showPreWarning, setShowPreWarning] = useState<boolean>(false);\n    \n    const hide = ()=>setVisible(false);\n\n    function validateForm(): boolean { // Makes sure that no text field related to course search is empty\n        return department.length > 0 && courseID >= 100;\n    }\n\n    function validateTable() {\n        return Object.values(courseRecord).length > 0 && checkSemester(semesterInfo) === -1;\n    }\n\n    function validateCourse() {\n        return preRequirements && department != \"\" && courseID != 0 && title != \"\" && description != \"\" && credits != 0 && year >= determineYear();\n    }\n    \n    function validatePreRequirements(course: Course): void{\n        //Iterate through each course   \n        let valid_course = true;\n        //If there are no prerequisites, the course is valid, you can probably just break here.\n        if (course.preReqs[0][0] == \"\"){\n            setShowPreWarning(false);\n            setPreRequirements(true);\n            return;\n        }\n\n        //We look in each prerequisite structure, which holds the keys we are looking for\n        for (let j = 0; j < course.preReqs.length; j++){\n            //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n            for (let h = 0; h < course.preReqs[j].length; h++){\n                //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                //console.log(course.preReqs[j][h]);\n                if (!checkCourse(course.preReqs[j][h])){\n                    valid_course = false;\n                }else{\n                    valid_course = true;\n                    break;\n                }\n            }\n        }    \n        if (valid_course){\n            setShowPreWarning(false);\n            setPreRequirements(true);\n        } else {\n            setShowPreWarning(true);\n            setPreRequirements(false);\n        }\n    }\n   \n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n\n        const key = department + courseID;\n\n        let course: Course = {\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            fufills: \"\"\n        };\n        \n        if(catalog[key]){\n            course = getCourse(department, courseID);\n            setCourseInfo(course);\n            setShowCard(true);\n        }else{\n            setShowCard(false);\n        }\n\n        setShowPreWarning(false);\n        validatePreRequirements(course);\n        setTitle(course.title);\n        setDescription(course.description);\n        setCredits(course.credits);\n        setPreReqs(course.preReqs);\n        setFufills(course.fufills);\n        \n    }\n\n    function addCourse(newCourse: Course){ \n        const courseKey: string = newCourse.department + newCourse.courseID;\n\n        setCourseRecord({...courseRecord, [courseKey]: newCourse});\n        setCreditTotal(determineCreditTotal({...courseRecord, [courseKey]: newCourse}));\n        setExpectedTuition(expectedTuition);\n    }\n\n    function getCourse(department: string, id: number): Course{\n        const name = department + id;\n        \n        return catalog[name];\n    }\n\n    function clearCourseRecord(){\n        setCourseRecord({});\n    }\n\n    function saveSemester(){\n        addSemester(semesterInfo);\n        clearData();\n        setShowCard(false);\n        hide();\n    }\n\n    function determineCreditTotal(record: Record<string, Course>) {\n        let total = 0;\n        const courses = Object.values(record);\n        for(let i = 0; i<courses.length; i++){\n            total += courses[i].credits;\n        }\n        return total;\n    }\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        switch(word){\n        case \"Winter\":\n            setSeason(0);\n            break;\n        case \"Spring\":\n            setSeason(1);\n            break;\n        case \"Summer\":\n            setSeason(2);\n            break;\n        case \"Fall\":\n            setSeason(3);\n            break;\n        }\n    }\n\n    function displayReqs(s: string[][]){\n        let i;\n        if(showCard){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \" or \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseRecord({});\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([[\"\"]]);\n\n        setShowPreWarning(false);\n        setShowCard(false);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"xl\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"course-id-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"add-course-button\" id=\"add-course-button\" onClick={()=>addCourse(courseInfo)} disabled={!validateCourse()}>\n                            Add\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col data-testid = \"season-radio-buttons\">\n                        <FormCheck data-testid=\"winter-radio\" inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck data-testid=\"spring-radio\" inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck data-testid=\"summer-radio\" inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck data-testid=\"fall-radio\" inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\" placeholder=\"Year\"\n                            min={determineYear()}\n                            max={(determineYear() + 6)}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                {showPreWarning && \n                    <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                        </svg>\n                        <div style = {{ paddingLeft: 10 }}>\n                            You cannot add this course to your semester as it&apos;s prerequisite(s) has not been fufilled in a previous semester ({displayReqs(preReqs)})\n                        </div>\n                    </div>}\n                <Row>\n                    <Col>\n                        {showCard && <CourseCardDisplay courseInfo = {courseInfo} setCourseInfo = {setCourseInfo} showCard={showCard} validatePreRequirements={validatePreRequirements}></CourseCardDisplay>}\n                    </Col>\n                    <Col>\n                        <CardPool showCard={showCard}></CardPool>\n                    </Col>\n                </Row>\n                <Row>\n                    <SemesterTable data-testid=\"semester-table\" semester={{season, year, courseRecord, creditTotal, expectedTuition}} addCourse={addCourse} checkCourse={checkCourse} year={year}></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" data-testid=\"clear-course-list-button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseRecord}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" data-testid=\"save-semester-button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n/**\n * Creates a Card containing all of the Semester information (SemesterTable),\n * macro data such as cost of attendance and total credits, a deleteSemester \n * button, etc.\n * @param semester A semester.\n * @param deleteSemester Deletes a single semester from the plan.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Navbar\n */\nexport function SemesterCard({ semester, deleteSemester, editCourseLauncher, deleteCourse }: {\n    semester: Semester;\n    deleteSemester: (semester: Semester) => void;\n    editCourseLauncher: ({course, semester}: {course: Course, semester:Semester}) => void;\n    deleteCourse: ({course, semester}: {course: Course, semester:Semester}) => void;\n}): JSX.Element {\n    /**\n     * Gets the string value of a given Season enum.\n     * @param season A season enum.\n     *\n     * @returns {string} The passed in season's string value.\n     */\n    function getSeason(season: Season): string{\n        switch(season) {\n        case 3:\n            return \"Fall\";\n        case 0:\n            return \"Winter\";\n        case 1:\n            return \"Spring\";\n        case 2:\n            return \"Summer\";\n        default:\n            return \"Inproper Semester\";\n        }\n    }\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container>\n                    <Row>\n                        <div className=\"flex-container\">\n                            {/* <div className=\"left-semester-container\"></div> */}\n                            <div className=\"middle-semester-container\">\n                                <Col>\n                                    <h1>{\"Semester: \" + getSeason(semester.season) + \" \" + semester.year}</h1>\n                                </Col>\n                            </div>\n                            <div className=\"right-semester-container\">\n                                <Button variant=\"danger\" size=\"sm\" onClick={() => deleteSemester(semester)}>\n                                    Delete Semester\n                                </Button>\n                            </div>\n                        </div>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Courses:</Card.Title>\n                <Row>\n                    <SemesterTable\n                        semester={semester}\n                        editCourseLauncher={editCourseLauncher}\n                        deleteCourse={deleteCourse}\n                    ></SemesterTable>\n                </Row>\n                <p>PLACEHOLDER FOR SEMESTER STATS (TOT CREDITS, ESTIMATED COST, ETC)</p>\n            </Card.Body>\n            <Card.Footer>\n                {(semester.season % 2) && <Button variant=\"primary\">Add Semester: {getSeason((semester.season + 1) % 4)}</Button>}\n            </Card.Footer>\n        </Card>   \n    );\n}","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n/**\n * Renders the SemesterCards as a 2xn \"table\" in order, effectively creating\n * a viewable plan.\n * \n * @param semesters A list of semesters.\n * @param deleteSemester Deletes a single semester from the plan.\n * @param showModal Shows the AddSemesterModal.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n *\n * @returns {JSX.Element} A JSX.Element containing the rendered plan.\n */\nexport function PlanTable({ semesters, deleteSemester, showModal, editCourseLauncher, deleteCourse }: {\n    semesters: Semester[];\n    deleteSemester: (semester: Semester) => void;\n    showModal: (b:boolean) => void;\n    editCourseLauncher: ({course, semester}: {course: Course, semester:Semester}) => void;\n    deleteCourse: ({course, semester}: {course: Course, semester:Semester}) => void;\n}): JSX.Element {\n\n    const sortedSemesters = semesters.sort(compareSeason).sort(compareYear);\n\n    /**\n     * Calculates the difference between two semesters' years.\n     * @param a The first Semester.\n     * @param b The second Semester.\n     *\n     * @returns {number} Number of years between Semester a and Semester b.\n     */\n    function compareYear(a: Semester, b: Semester):number {\n        return a.year - b.year;\n    }\n\n    /**\n     * Calculates the difference between two semesters' seasons.\n     * @param a The first Semester.\n     * @param b The second Semester.\n     *\n     * @returns {number} Number of seasons between Semester a and Semester b.\n     */\n    function compareSeason(a: Semester, b: Semester):number {\n        return a.season - b.season;\n    }\n    \n    /**\n     * Creates a SemesterCard of a single Semester\n     * @param the_semester A Semester.\n     *\n     * @returns {JSX.Element} A SemesterCard for the_semester.\n     */\n    function renderList(the_semester: Semester): JSX.Element {\n        return (\n            <SemesterCard\n                key={the_semester.season.toString() + the_semester.year.toString()}\n                semester={the_semester} \n                deleteSemester={deleteSemester}\n                editCourseLauncher={editCourseLauncher}\n                deleteCourse={deleteCourse}\n            ></SemesterCard>\n        );\n    }\n\n    /**\n     * Renders a SemesterCard pair, or a SemesterCard and a AddSemester button\n     * on the PlanTable\n     * @param truncatedSemesterCardArray An array (of size 1 or 2) of SemesterCards,\n     * containing semesters from the plan.\n     *\n     * @returns {JSX.Element} A <Row> containing the SemesterCard pair / \n     * SemesterCard + AddSemester button.\n     */\n    function listDisplay(truncatedSemesterCardArray: JSX.Element[]): JSX.Element {\n\n        if (!(truncatedSemesterCardArray.length % 2)) {\n            return (\n                <Row key={truncatedSemesterCardArray[0].key}>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                        {truncatedSemesterCardArray[1]}\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <Row key={truncatedSemesterCardArray[0].key}>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                    </Col>\n                </Row>\n            );\n        }\n    }\n\n    const semesterJSX: JSX.Element[] = sortedSemesters.map(renderList);\n    semesterJSX.push(<Card><Button\n        className=\"button\"\n        data-testid=\"add-semester-button-plan-table\"\n        id=\"add-semester-button-plan-table\"\n        onClick={()=>showModal(true)}>Add Semester</Button></Card>);\n    const semesterPairs: JSX.Element[][] = [];\n\n    for(let i = 0; i < semesterJSX.length; i += 2) {\n        semesterPairs.push(semesterJSX.slice(i, i + 2));\n    }\n    \n\n    return (\n        <div className=\"plan-table\" data-testid= \"plan-table\" id=\"plan-table\">\n            {semesterPairs.map(listDisplay)}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, ModalFooter } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\n/**\n * Creates a Modal that contains a Form (with verification) to edit a given Course.\n * @param setEditCourseVisible Sets the visibility of EditCourseModal.\n * @param editCourseVisible Visibility of EditCourseModal.\n * @param course A course.\n * @param setCurrentCourse Sets the current course that is being edited.\n * @param editCourse Removes the course that has been edited and adds the \n * updated course in its place.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Modal with embedded Form.\n */\nexport function EditCourseModal({ setEditCourseVisible, editCourseVisible, course, editCourse}: {\n    setEditCourseVisible: (b:boolean) => void;\n    editCourseVisible: boolean;\n    course: Course;\n    setCurrentCourse: (c:Course) => void;\n    editCourse: (c:Course) => void;\n}): JSX.Element {\n\n    const [newCourse, setNewCourse] = useState<Course>(course);\n\n    const [validated, setValidated] = useState(false);\n    const hide = ()=>setEditCourseVisible(false);\n\n    function resetCourseHooks(): void {\n        setNewCourse({\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            fufills: \"\"\n        });\n    }\n \n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>):void => {\n        event.preventDefault();\n        const form: HTMLFormElement = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            setValidated(true);\n            const inputValueArray: string[] = new Array(form.elements.length - 1);\n            for (let i = 0; i<form.elements.length - 1; i++) { // -1 is to remove the button\n                const copyElement: HTMLInputElement = form.elements[i] as HTMLInputElement;\n                inputValueArray[i] = copyElement.value;\n            }\n            console.log(inputValueArray);\n            const updateNewCourse: Course = {\n                department: inputValueArray[0],\n                courseID: parseInt(inputValueArray[1]),\n                title: inputValueArray[2],\n                description: inputValueArray[3],\n                credits: parseInt(inputValueArray[4]),\n                preReqs: course.preReqs,\n                fufills: \"\"\n            };\n            setNewCourse(updateNewCourse);\n        }\n        \n    };\n\n    function saveCourse() {\n        console.log(newCourse);\n        editCourse(newCourse);\n        resetCourseHooks();\n        setValidated(false);\n        hide();\n    }\n\n    return(\n        <Modal\n            data-testid=\"edit-course-modal\"\n            show={editCourseVisible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            size=\"lg\">\n            <ModalHeader closeButton onClick={resetCourseHooks}>\n                <Modal.Title>Edit {course.department + course.courseID}</Modal.Title>\n            </ModalHeader>\n\n            <ModalBody>\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationDepartment\">\n                            <Form.Label>Department</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"ABCD or ABC\"\n                                defaultValue={course.department}\n                                minLength={3}\n                                maxLength={4}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Department!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Department! Please provide a 3-4 \n                                character long Department tag (ex. ENGL)\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCourseID\">\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"number\"\n                                placeholder=\"123\"\n                                defaultValue={course.courseID}\n                                pattern=\"\\d*\"\n                                minLength={3}\n                                maxLength={3}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Course ID!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Course ID! Please include a 3 digit Course ID (ex. 123). \n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationTitle\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"Introduction to Course Registration\"\n                                defaultValue={course.title}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Title!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Title! Please include a valid title (ex. Introduction to Course Registration). \n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"validationDescription\">\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control\n                                required\n                                as=\"textarea\"\n                                style={{ height: \"100px\" }}\n                                type=\"text\"\n                                placeholder={(\"Principles of how to plan a schedule, incluing how breadths work, what\" +\n                                    \"BlueHenPlanner is and how it works, where to find your registration appointment\" +\n                                    \"date and time, etc.\")}\n                                defaultValue={course.description}\n                            />\n                            <Form.Control.Feedback>\n                                Valid description!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid description.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationCredits\">\n                            <Form.Label>Credits</Form.Label>\n                            <Form.Control\n                                required\n                                as=\"select\"\n                                aria-label=\"Floating label select example\"\n                                type=\"number\"\n                                defaultValue={course.credits}\n                            >\n                                <option value={0}>0</option>\n                                <option value={1}>1</option>\n                                <option value={2}>2</option>\n                                <option value={3}>3</option>\n                                <option value={4}>4</option>\n                                <option value={5}>5</option>\n                                <option value={6}>6</option>\n                            </Form.Control>\n                            <Form.Control.Feedback>\n                                Valid credit total!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid credit total between 1 and 9.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Button\n                        variant=\"primary\"\n                        type=\"submit\"\n                    >Check Course Changes</Button>\n                </Form>\n            </ModalBody>\n            <ModalFooter>\n                {validated && <Button\n                    className=\"button\"\n                    id=\"save-course-button\"\n                    onClick={saveCourse}>Save Course</Button>}\n            </ModalFooter>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Course } from \"../interface/course\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport { Popover, OverlayTrigger } from \"react-bootstrap\";\nexport function RequiredDegreeList({checkCourse, catalog, degree_plan, degree_list}: {\n    checkCourse: (c: string)=>boolean,\n    catalog: Record<string, Course>;\n    degree_plan: string,\n    degree_list: string[]}): JSX.Element{\n    \n    function createList(course: string){\n        let popover_description;\n        let popover_header;\n        if (catalog[course]){\n            popover_header = course;\n            popover_description = catalog[course].description;\n        }else if (course.includes(\" or \")){\n            popover_header = course;\n            popover_description = \"Add either one of these courses to fufill this degree requirement\";\n        }else{\n            popover_header = \"Requirements\";\n            popover_description = \"Some courses fufill requirements, such as breadth requirements. If a course does fufill one but hasn't been included, you can go into the edit course section and modify the 'fufills' field, and put in the desired course\";\n        }\n        const popover = \n            <Popover id=\"popover-basic\">\n                <Popover.Header as=\"h3\">{popover_header}</Popover.Header>\n                <Popover.Body>\n                    {popover_description}\n                </Popover.Body>\n            </Popover>\n        ;\n          \n        if (checkCourse(course)){\n            return(\n                <OverlayTrigger placement=\"right\" overlay={popover}>\n                    <a className=\"list-group-item list-group-item-success\" key = {course}> {course} </a>\n                </OverlayTrigger>\n            );\n        }else{\n            return(\n                <OverlayTrigger  placement=\"right\" overlay={popover}>\n                    <a className=\"list-group-item list-group-item-action\" key = {course}> {course} </a>\n                </OverlayTrigger>\n            );\n        }\n    }\n    return(\n        <div className = \"TEST\">\n            <button type=\"button\" className=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModalLong\">\n                Degree Audit\n            </button>\n            <div className=\"modal fade\" id=\"exampleModalLong\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"exampleModalLongTitle\"> {degree_plan} </h5>\n                        </div>\n                        <div className=\"modal-body\">\n                            <div id = \"required_degree_list\">\n                                <div className=\"list-group w-100\" key = \"degree_requirements\" id = \"degree_requirements\">\n                                    {degree_list.map(createList)}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/University_of_Delaware_wordmark.99b5a349.svg\";","import React from \"react\";\nimport { Semester } from \"../interface/semester\";\n//import { Course } from \"../interface/course\";\n//import { useState } from \"react\";\nimport { downloadBlob } from \"./downloads\";\n//import { Button, Form } from \"react-bootstrap\";\n\nexport function CSVExport(plan: Semester[]): void{\n    if(plan !== []){\n        downloadBlob(extractAsCSV(plan), \"degreePlan.csv\", \"text/csv\");\n    }\n}\n\nexport function CSVImport(): JSX.Element{\n    /*const [file, setFile] = useState<File>();\n\n    return (\n        <Form id='csv-form'>\n            <Form.Control \n                data-testid=\"csv-import\"  \n                as=\"input\"\n                type='file'\n                accept='.csv'\n                id='csvFile'\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    if(e.target.files != null)\n                        setFile(e.target.files[0]);\n                }}\n            >\n            </Form.Control>\n            <Button className=\"button\" type=\"submit\" data-testid=\"file-input-button\" id=\"file-input-button\">\n                Submit\n            </Button>\n        </Form>*/\n    return (\n        <div>\n            <p>This feature is not yet implemented</p>\n        </div>\n    );\n}\n\n\n\n/*const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n\n    function redetermineSeason(season: string): Season{\n        switch(season){\n        case \"Winter\":\n            return 0;\n        case \"Spring\":\n            return 1;\n        case \"Summer\":\n            return 2;\n        case \"Fall\":\n            return 3;\n        }\n        return 0;\n    }\n\n    \n        .pipe(csv())\n        .on(\"data\", function (row) {\n            const season = redetermineSeason(row.Season);\n            \n            const semester: Semester = {\n                season,\n                year: +row.Year,\n                courseRecord,\n                creditTotal: +row.Credit_Total,\n                expectedTuition: +row.Expected_Tuition\n            };\n\n            if(!plan.includes(semester))\n                setPlan([...plan, semester]);\n\n            const course: Course = {\n                department: row.Department,\n                courseID: +row.CourseID,\n                title: row.Title,\n                description: row.Description,\n                credits: +row.Credits,\n                preReqs: row.Pre_Requisites,\n                coReqs: row.Co_Requisites,\n                semestersOffered: row.Semesters_Offered\n            };\n\n            \n            for(let i = 0; i<plan.length; i++){\n                if(plan[i].season + plan[i].year === row.Semester){\n                    const courseKey = row.Department + row.CourseID;\n                    if(!plan[i].courseRecord[courseKey])\n                        setCourseRecord({...plan[i].courseRecord, [courseKey]: course});\n                }\n            }\n        });*/\n//return file;\n\nfunction extractAsCSV(rows: Semester[]): string{\n    const emptyRow = \", \\n\";\n    const semesterHeaders = [\"Year\", \"Season\", \"Credit Total\", \"Expected Tuition\"];\n    const courseHeaders = [\"Semester\", \"Department\", \"courseID\", \"Title\", \"Description\", \"Pre-Requisites\", \"Co-Requisites\", \"Semesters Offered\"];\n\n    function determineSeason(num: number){\n        switch(num){\n        case 0:\n            return \"Winter\";\n        case 1:\n            return \"Spring\";\n        case 2:\n            return \"Summer\";\n        case 3:\n            return \"Fall\";\n        }\n    }\n\n    function reqFormatter(courses: string[][]): string{\n        let ret = \"\";\n        for(let i = 0; i<courses.length; i++){\n            for(let p = 0; p<courses[i].length; p++){\n                ret += `${courses[i][p]}`;\n                if(courses[i][p+1]){\n                    ret += \" or \";\n                }\n            }\n            if(courses[i+1]){\n                ret += \" and \";\n            }\n        }\n        if(ret === \"\"){\n            ret = \"N/A\";\n        }\n        return ret + \" \";\n    }\n\n    function produceCourseData(){\n        let courseData = \"\";\n        for(let i = 0; i<rows.length; i++){\n            courseData = courseData + emptyRow + emptyRow + courseHeaders.join(\",\") + \"\\n\" + \n            determineSeason(rows[i].season) + \" \" + rows[i].year + \",\" + Object.values(rows[i].courseRecord).map(course => {\n                return course.department + \",\" + course.courseID + \",\" + course.title + \",\" + `\"${course.description}\"` + \",\" + \n                reqFormatter(course.preReqs) + \",\" + \"\\n\";\n            });\n        }\n        return courseData;\n    }\n\n    function produceSemesterData(){\n\n        const formatter = new Intl.NumberFormat(undefined, {\n            style: \"currency\",\n            currency: \"USD\",\n            //obtained from https://stackoverflow.com/questions/149055/how-to-format-numbers-as-currency-strings\n        });\n\n        const semesterData = semesterHeaders.join(\",\") + \"\\n\" + rows.map(row => {\n            const data = [row.year, determineSeason(row.season), row.creditTotal, formatter.format(row.expectedTuition)];\n            return data.join(\",\");\n        }).join(\"\\n\");\n\n        return semesterData;\n    }\n\n    const csvContent = produceSemesterData() + produceCourseData();\n    \n    return csvContent;\n}","/** Download contents as a file\n * Source: https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side\n */\nexport function downloadBlob(content: string, filename: string, contentType: string): void {\n    // Create a blob\n    const blob = new Blob([content], { type: contentType });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link to download it\n    const pom = document.createElement(\"a\");\n    pom.href = url;\n    pom.setAttribute(\"download\", filename);\n    pom.click();\n}","import React, { Navbar, Nav, NavDropdown, Container } from \"react-bootstrap\";\nimport UDLogo from \"../Assets/University_of_Delaware_wordmark.svg\";\nimport { CSVImport } from \"../Assets/CSV-Functions\";\nimport { CSVExport } from \"../Assets/CSV-Functions\";\nimport { Semester } from \"../interface/semester\";\n/**\n * Creates a Navbar that contains the University of Delaware logo, a \n * deleteAllSemesters button, a DropDown with upload and download csv. buttons, \n * etc.\n * @param deleteAllSemesters Deletes all semesters from the plan.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Navbar\n */\nexport function SchedulerNavbar({deleteAllSemesters, setDegreePlan, setDegreeRequirements, plan, degree_plan_list}: {\n    deleteAllSemesters: () => void\n    setDegreeRequirements: (p: string[])=>void,\n    setDegreePlan: (p: string)=>void,\n    plan: Semester[],\n    degree_plan_list: Record<string, string[]>}): JSX.Element {\n\n\n    function updateDegree(plan: string){\n        setDegreePlan(plan);\n        setDegreeRequirements(degree_plan_list[plan]);\n    }\n    function createDegreeDropDown(plan: string){\n        return (\n            <NavDropdown.Item eventKey=\"changedegreeplan\" onClick = {()=>updateDegree(plan)}>{plan}</NavDropdown.Item>\n        );\n    } \n    return (\n        <Navbar\n            data-testid=\"scheduler-navbar\"\n            bg=\"light\"\n            variant=\"light\"\n            sticky=\"top\"\n            expand=\"xxl\">\n            <Container>\n                <Navbar.Brand href=\"#home\">\n                    <img\n                        alt=\"UD Logo\"\n                        src={UDLogo}\n                        width=\"140px\"\n                        height=\"60px\"\n                        className=\"img-responsive\"\n                    />\n                    {\"\"}\n                </Navbar.Brand>\n                <Nav className=\"sch-nav\" justify={true}>\n                    <Nav.Item>\n                        <Nav.Link \n                            id=\"delete-all-semesters-nav\"\n                            onClick = {() => deleteAllSemesters()}\n                        >Delete All Semesters</Nav.Link>\n                    </Nav.Item>\n                    <NavDropdown title=\"Set Degree Plan\">\n                        {Object.keys(degree_plan_list).map(createDegreeDropDown)} \n                    </NavDropdown>\n                    <NavDropdown title=\"scheduleDropdown\" id=\"sch-dropdown\">\n                        <NavDropdown.Item \n                            eventKey=\"downloadcsv\"\n                            onClick = {() => CSVExport(plan)}\n                        >Download as .csv</NavDropdown.Item>\n                        <NavDropdown.Item \n                            eventKey=\"uploadcsv\"\n                            onClick = {() => CSVImport()}\n                        >Upload .csv</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Nav.Link\n                    className=\"ud-catalog-link\"\n                    href=\"https://catalog.udel.edu/\"\n                    target=\"_blank\"\n                >\n                    <strong>UD Catalog</strong>\n                </Nav.Link>\n            </Container>\n        </Navbar>\n    );\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Course } from \"./interface/course\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\nimport { EditCourseModal } from \"./Components/EditCourseModal\";\nimport { RequiredDegreeList } from \"./Components/RequiredDegreeList\";\nimport courseData from \"./Assets/courseData.json\";\nimport courseCatalog from \"./Assets/testcourses.json\";\nimport { SchedulerNavbar } from \"./Components/SchedulerNavbar\";\nimport degreePlanList from \"./Assets/degreeplans.json\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n    const catalog: Record<string, Course> = courseCatalog;\n    const [degreePlan, setDegreePlan] = useState<string>(\"Computer Science: (BS)\");\n    const [degreeRequirements, setDegreeRequirements] = useState<string[]>(degreePlanList[\"Computer Science: (BS)\"]);\n    const [editCourseVisible, setEditCourseVisible] = useState<boolean>(false);\n    const [currentCourse, setCurrentCourse] = useState<Course>({\n        department: \"\",\n        courseID: 0,\n        title: \"\",\n        description: \"\",\n        credits: 0,\n        preReqs: [[\"\"]],\n        fufills: \"\"\n    });\n    const [semesterIndex, setSemesterIndex] = useState<number>(0);\n\n    function setUp(){\n        courseData.forEach((json_course)=>{\n            const course_entry: Course = {\n                department: \"\",\n                courseID: 0,\n                title: \"\",\n                description: \"\",\n                credits: 0,\n                preReqs: [],\n                fufills: \"\"\n            };\n            //Split the courseID into the number. \"CISC 106\" -> \"CISC\" + \"106\"\n            const courseID_split: string[] = json_course.courseID.split(\" \");\n            course_entry.department = courseID_split[0];\n            course_entry.courseID =  parseInt(courseID_split[1]);\n\n            const title_split: string[] = json_course.title.split(\"- \");\n            course_entry.title = title_split[1];\n            course_entry.description = json_course.description;\n            course_entry.credits = parseInt(json_course.credits);\n            if (json_course.prereqs != []){\n                json_course.prereqs.forEach((prereq)=>{\n                    prereq.replace(\" \", \"\");\n                });\n                course_entry.preReqs.push(json_course.prereqs);\n            }else{\n                course_entry.preReqs.push([\"\"]);\n            }\n            \n            //Handling fufillments\n            if (json_course[\"University Breadth\"] != \"\"){\n                const fufilled_breadth = json_course[\"University Breadth\"].substr(1);\n                course_entry.fufills = fufilled_breadth;\n            }\n            const key: string = course_entry.department + course_entry.courseID;\n            catalog[key] = course_entry;\n        });\n    }\n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        setPlan([]);\n    }\n    function checkCourse(course: string): boolean {\n        let i;\n        if (course.includes(\" or \")){\n            const courses: string[] = course.split(\" or \", 2);\n            for(i = 0; i<plan.length; i++){\n                if(plan[i].courseRecord[courses[0]] || plan[i].courseRecord[courses[1]]){\n                    return true;\n                }\n            }\n            return false;\n        }else if (course.includes(\"Credits\")){\n            const requirement: string[] = course.split(\": \");\n            const nondigits = new RegExp(\"[a-zA-Z:/ ]\", \"g\");\n            const credits_needed = parseInt(course.replace(nondigits, \"\"));\n            let credit_count = 0;\n            for(i = 0; i<plan.length; i++){\n                const course_array: Course[] = Object.values(plan[i].courseRecord);\n                for (let j = 0; j < course_array.length; j++){\n                    if (course_array[j].fufills === requirement[0]){\n                        credit_count += course_array[j].credits;\n                    }\n                }\n            }\n\n            if (credit_count >= credits_needed){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            for(i = 0; i<plan.length; i++){\n                if(plan[i].courseRecord[course]){\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    function editCourse(course: Course) {\n        const editSemesterIndex: number = semesterIndex;\n        delete plan[editSemesterIndex].courseRecord[currentCourse.department + currentCourse.courseID];\n        plan[editSemesterIndex].courseRecord = {...plan[editSemesterIndex].courseRecord, [course.department + course.courseID]: course};\n        setPlan([...plan]);\n    }\n\n    function deleteCourse({course, semester}: {\n        course: Course;\n        semester: Semester;\n    }): void {\n        const deleteSemesterIndex: number = checkSemester(semester);\n        delete plan[deleteSemesterIndex].courseRecord[course.department + course.courseID];\n        setPlan([...plan]);\n    }\n\n    function editCourseLauncher({course, semester}: {\n        course: Course;\n        semester: Semester;\n    }): void {\n        setSemesterIndex(checkSemester(semester));\n        setCurrentCourse(course);\n        setEditCourseVisible(true);\n    }\n\n    function deleteSemester(semester: Semester) {\n        let deleteSemesterIndex = 0;\n        for(let i = 0; i < plan.length; i++) {\n            if(semester.season === plan[i].season && semester.year === plan[i].year) {\n                deleteSemesterIndex = i;\n            }\n        }\n        const newPlan = [...plan];\n        newPlan.splice(deleteSemesterIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    function checkSemester(semesterToCheck: Semester): number {\n        for(let semesterIndex = 0; semesterIndex<plan.length; semesterIndex++){\n            if(semesterToCheck.year === plan[semesterIndex].year && semesterToCheck.season === plan[semesterIndex].season){\n                return semesterIndex;\n            }\n        }\n        return -1;\n    }\n\n    //Adds all courses to the course catalog\n    setUp();\n    return (\n        <DndProvider backend = {HTML5Backend}>\n            <Container className=\"App\">\n                <header></header>\n                <SchedulerNavbar\n                    deleteAllSemesters={deleteAllSemesters}\n                    setDegreeRequirements = {setDegreeRequirements}\n                    setDegreePlan = {setDegreePlan}\n                    plan={plan}\n                    degree_plan_list = {degreePlanList}\n                ></SchedulerNavbar>\n                <Row>\n                    <AddSemesterModal\n                        addSemester={addSemester}\n                        checkSemester={checkSemester}\n                        setVisible={setVisible}\n                        checkCourse={checkCourse}\n                        visible={visible}\n                        catalog={catalog}\n                    ></AddSemesterModal>\n                    <EditCourseModal\n                        setEditCourseVisible={setEditCourseVisible}\n                        editCourseVisible={editCourseVisible}\n                        course={currentCourse}\n                        setCurrentCourse={setCurrentCourse}\n                        editCourse={editCourse}\n                    ></EditCourseModal>\n                    <RequiredDegreeList\n                        checkCourse = {checkCourse}\n                        catalog = {catalog}\n                        degree_plan = {degreePlan}\n                        degree_list={degreeRequirements}\n                    ></RequiredDegreeList>\n                </Row>\n                <Row>\n                    <PlanTable\n                        semesters={plan}\n                        deleteSemester={deleteSemester}\n                        showModal={setVisible}\n                        editCourseLauncher={editCourseLauncher}\n                        deleteCourse={deleteCourse}\n                    ></PlanTable>\n                </Row>\n                <Row>\n                </Row>\n            </Container>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}