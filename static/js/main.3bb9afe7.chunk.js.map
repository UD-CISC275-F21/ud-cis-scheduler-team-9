{"version":3,"sources":["Components/CourseCard.tsx","Components/CardPool.tsx","Components/CourseCardDisplay.tsx","Components/SemesterTable.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","Components/EditCourseModal.tsx","Components/RequiredDegreeList.tsx","Assets/University_of_Delaware_wordmark.svg","Components/SchedulerNavbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CourseCard","cardInfo","setDeleteCard","showCard","hide","hideButton","useDrag","type","item","department","courseID","title","description","credits","preReqs","coReqs","semestersOffered","collect","monitor","isDragging","drag","displayReqs","s","i","undefined","phrase","length","Card","draggable","className","ref","style","opacity","Body","Title","Button","onClick","Text","semesters","forEach","console","log","displaySemesters","CardPool","useState","pool","setPool","deleteCard","useDrop","accept","drop","find","course","handlePool","isOver","addToPoolRef","filter","courseCard","id","map","CourseCardDisplay","courseInfo","setCourseInfo","dropEffect","handleDisplay","addToDisplay","SemesterTable","semester","editCourseLauncher","deleteCourse","addCourse","addToTableRef","Table","scope","Object","values","courseRecord","index","substring","variant","size","AddSemesterModal","addSemester","setVisible","checkCourse","visible","catalog","season","setSeason","year","setYear","setCourseRecord","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","semesterInfo","setDepartment","setCourseID","setTitle","setDescription","setCredits","setPreReqs","setCoReqs","setSemestersOffered","preRequirements","setPreRequirements","coRequirements","setCoRequirements","fufills","setFufills","setShowCard","showPreWarning","setShowPreWarning","showCoWarning","setShowCoWarning","newCourse","courseKey","record","total","courses","determineCreditTotal","determineYear","Date","getFullYear","determineSeason","word","clearData","useEffect","courseArray","valid_course","j","h","temp","validateCoRequirements","Modal","show","onHide","backdrop","keyboard","ModalHeader","closeButton","ModalBody","Row","Form","onSubmit","event","preventDefault","getCourse","validatePreRequirements","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","min","valueAsNumber","disabled","Col","FormCheck","inline","name","label","checked","e","FormControl","placeholder","max","role","xmlns","width","height","fill","viewBox","d","paddingLeft","SemesterCard","deleteSemester","getSeason","bg","Header","Container","Footer","PlanTable","showModal","semesterJSX","sort","a","b","the_semester","toString","push","semesterPairs","slice","truncatedSemesterCardArray","key","EditCourseModal","setEditCourseVisible","editCourseVisible","editCourse","setNewCourse","validated","setValidated","resetCourseHooks","noValidate","form","currentTarget","checkValidity","stopPropagation","inputValueArray","Array","elements","copyElement","updateNewCourse","parseInt","md","controlId","required","defaultValue","Feedback","pattern","ModalFooter","RequiredDegreeList","degree_plan","degree_list","popover_description","popover_header","includes","popover","Popover","OverlayTrigger","placement","overlay","SchedulerNavbar","deleteAllSemesters","setDegreePlan","setDegreeRequirements","degree_plan_list","Navbar","sticky","expand","Brand","href","alt","src","UDLogo","Nav","justify","Item","Link","NavDropdown","keys","plan","eventKey","updateDegree","App","setPlan","courseCatalog","degreePlan","degreePlanList","degreeRequirements","currentCourse","setCurrentCourse","semesterIndex","setSemesterIndex","split","requirement","nondigits","RegExp","credits_needed","replace","credit_count","course_array","checkSemester","semesterToCheck","courseData","json_course","course_entry","courseID_split","title_split","prereqs","prereq","fufilled_breadth","substr","DndProvider","backend","HTML5Backend","editSemesterIndex","deleteSemesterIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bb9afe7.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { Season } from \"../interface/semester\";\n\n\nexport function CourseCard({cardInfo, setDeleteCard, showCard, hide, hideButton}: {\n    cardInfo: Course,\n    setDeleteCard:(c:Course | undefined) => void, \n    showCard: boolean,\n    hide: boolean,\n    hideButton: boolean}): JSX.Element{\n\n    const [{ isDragging }, drag] = useDrag(() => ({\n        type: \"courseCard\",\n        item: { \n            department: cardInfo.department, \n            courseID: cardInfo.courseID, \n            title: cardInfo.title, \n            description: cardInfo.description, \n            credits: cardInfo.credits, \n            preReqs: cardInfo.preReqs, \n            coReqs: cardInfo.coReqs, \n            semestersOffered: cardInfo.semestersOffered\n        },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    }), [cardInfo.department, cardInfo.courseID]);\n\n    function displayReqs(s: string[][]): string | undefined{\n        let i;\n        if(showCard && s != undefined){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \", \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n    \n    function displaySemesters(semesters: Season[]){\n        let i = 0;\n        let phrase = \"\";\n        if(semesters != undefined){\n            semesters.forEach((s)=>{\n                switch(s){\n                case 0:\n                    phrase = phrase + \"Fall\";\n                    break;\n                case 1:\n                    phrase = phrase + \"Winter\";\n                    break;\n                case 2:\n                    phrase = phrase + \"Spring\";\n                    break;\n                case 3:\n                    phrase = phrase + \"Summer\";\n                    break;\n                }\n                \n                i++;\n                if(i<semesters.length)\n                    phrase = phrase + \", \";\n            });\n        }\n        console.log(cardInfo);\n        return phrase;\n    }\n    \n    return (\n        <Card draggable className = \"draggable-card\" ref={drag} style={{opacity: isDragging ? \"50%\" : \"100%\"}}>\n            <Card.Body>\n                <Card.Title>{cardInfo.department}{cardInfo.courseID}: {cardInfo.title} {!hideButton && <Button className=\"Danger\" onClick={()=>setDeleteCard(cardInfo)}>-</Button>}\n                    <Card.Text> Credits: {cardInfo.credits}</Card.Text>\n                </Card.Title> \n                {!hide && <Card.Text>{cardInfo.description}</Card.Text>}\n                {!hide && <Card.Text>Prereqs: {displayReqs(cardInfo.preReqs)}</Card.Text>} \n                {!hide && <Card.Text>Coreqs: {displayReqs(cardInfo.coReqs)}</Card.Text>} \n                {!hide && <Card.Text>Semesters: {displaySemesters(cardInfo.semestersOffered)}</Card.Text>}\n            </Card.Body>\n        </Card>\n    );\n}","import React, { useState } from \"react\";\nimport { Course } from \"../interface/course\";\nimport { useDrop } from \"react-dnd\";\nimport { CourseCard } from \"./CourseCard\";\n\nexport function CardPool({showCard}: {showCard: boolean}): JSX.Element{\n    const [pool, setPool] = useState<Course[]>([]);\n    const [deleteCard, setDeleteCard] = useState<Course>();\n\n    const [{ isOver } , addToPoolRef] = useDrop({\n        accept: \"courseCard\",\n        drop: (item: Course) => handlePool(item),\n    });\n\n    function handlePool(item: Course){\n        if (!pool.find((course) => course.department === item.department && course.courseID === item.courseID)) {\n            setPool([...pool, item]);\n        }\n    }\n\n    if(deleteCard != undefined){\n        console.log(\"Hi\");\n        setPool(pool.filter(courseCard => courseCard.department + courseCard.courseID !== deleteCard.department + deleteCard.courseID));\n        setDeleteCard(undefined);\n    }\n\n    return (\n        <div id = \"card-pool\" ref={addToPoolRef}>\n            {pool.map((courseCard, i) => \n                <div key={i}>\n                    <CourseCard cardInfo={courseCard} setDeleteCard={setDeleteCard} showCard={showCard} hide={true} hideButton={false}/>\n                </div>\n            )}\n            {isOver && console.log(\"over the card pool\")}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { CourseCard } from \"./CourseCard\";\n\n\nexport function CourseCardDisplay({courseInfo, setCourseInfo, showCard}: {\n    courseInfo: Course, \n    setCourseInfo:(b: Course) => void, \n    showCard: boolean}): JSX.Element{\n\n    const [deleteCard, setDeleteCard] = useState<Course>();\n    if(deleteCard != undefined)\n        setDeleteCard(undefined);\n\n    const [{ isOver }, addToDisplay] = useDrop(() => ({\n        accept: \"courseCard\",\n        item: { \n            department: courseInfo.department, \n            courseID: courseInfo.courseID, \n            title: courseInfo.title, \n            description: courseInfo.description, \n            credits: courseInfo.credits, \n            preReqs: courseInfo.preReqs, \n            coReqs: courseInfo.coReqs, \n            semestersOffered: courseInfo.semestersOffered\n        },\n        dropEffect: \"move\",\n        drop: (item: Course) =>  handleDisplay(item),\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n        }),\n    }), [courseInfo.department, courseInfo.courseID]);\n\n    function handleDisplay(item: Course){\n        if(courseInfo.department != item.department || courseInfo.courseID != item.courseID)\n            setCourseInfo(item);\n    }\n\n    return (\n        <div id = \"course-display\" ref={addToDisplay}>\n            {<CourseCard cardInfo={courseInfo} setDeleteCard={setDeleteCard} showCard={showCard} hide={false} hideButton={true}/>}\n            {isOver && console.log(\"over display\")}\n        </div>\n    );\n}","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { useDrop } from \"react-dnd\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n/**\n * Formats the Courses in a Semester within a Table, adds Edit and Delete buttons\n * if called in PlanTable.\n * @param semester A semester.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n * @param addCourse Adds a course to the courseRecord.\n *\n * @returns {JSX.Element} A JSX.Element containing a table poplated with the\n * courses in a Semester.\n */\nexport function SemesterTable({semester, editCourseLauncher, deleteCourse, addCourse}: { \n    semester: (Semester);\n    editCourseLauncher?: ({course, semester}: {course: Course, semester:Semester}) => void,\n    deleteCourse?: ({course, semester}: {course: Course, semester:Semester}) => void,\n    addCourse?: (newCourse: Course) => void\n    }): JSX.Element {\n      \n    const [{ isOver } , addToTableRef] = useDrop({\n        accept: \"courseCard\",\n        drop: (item: Course) => {\n            addCourse && addCourse(item);\n        },\n    });\n\n    /**\n    * Renders a single row in the table with a course's information.\n    * @param course A Course.\n    * @param index The index of the Course in the Semester.\n    *\n    * @returns {JSX.Element} A JSX.Element containing a <tr> with the course's\n    * name, title, description, credits, as well as an edit and delete button\n    * for the course if editCourseLauncher and deleteCourse are passed in.\n    */\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"course-title\">{course.title}</td>\n                <td id=\"course-description\">{course.description.substring(0, 50) + \"...\"}</td>\n                <td id=\"course-credits\">{course.credits}</td>\n                {editCourseLauncher && \n                <td id=\"course-edit-button\">\n                    <Button\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => editCourseLauncher({course, semester})}\n                    >Edit Course</Button>  \n                </td>}\n                {deleteCourse &&\n                <td>\n                    <Button\n                        variant=\"danger\"\n                        className=\"btn-block\"\n                        size=\"sm\"\n                        onClick={() => deleteCourse({course, semester})}\n                    >Delete Course</Button>\n                </td>}\n            </tr>\n        );\n    }\n\n    return (\n        <Table data-testid = \"semester-table\" id=\"semester-table\" ref={addToTableRef}>\n\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credits</th>\n                    {editCourseLauncher && <th scope=\"col\">Edit:</th>}\n                    {editCourseLauncher && <th scope=\"col\">Delete:</th>} \n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(semester.courseRecord).map(renderList)}\n            </tbody>\n            {isOver && console.log(\"over table\")}\n        </Table>\n    );\n}","import React, { useEffect, useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport { CardPool } from \"./CardPool\";\nimport { CourseCardDisplay } from \"./CourseCardDisplay\";\n\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\n\n/*Commented out the instances of checkSemester calls until we know how we want to handle it ()*/\nexport function AddSemesterModal({ addSemester, /*checkSemester,*/ setVisible, checkCourse, visible, catalog}:{\n    addSemester: (s: Semester)=>void,\n    /*checkSemester: (c: Semester)=>number,*/\n    setVisible: (v:boolean)=>void,\n    checkCourse: (c: string)=>boolean,\n    visible: (boolean),\n    catalog: (Record<string, Course>)}): JSX.Element {\n\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(1);\n    const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n    const semesterInfo = {season, year, courseRecord, creditTotal, expectedTuition};\n\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<string[][]>([[]]);\n    const [coReqs, setCoReqs] = useState<string[][]>([[]]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([]);\n    const [preRequirements, setPreRequirements] = useState<boolean>(true);\n    const [coRequirements, setCoRequirements] = useState<boolean>(true);\n    const [fufills, setFufills] = useState<string>(\"\");\n    const [courseInfo, setCourseInfo] = useState<Course>({department, courseID, title, description, credits, preReqs, coReqs, semestersOffered, fufills});\n\n    const [showCard, setShowCard] = useState<boolean>(false);\n    // add semester modal states\n    const [showPreWarning, setShowPreWarning] = useState<boolean>(false);\n    const [showCoWarning, setShowCoWarning] = useState<boolean>(false);\n    \n    const hide = ()=>setVisible(false);\n\n    function validateForm(): boolean { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100 && year >= determineYear();\n    }\n\n    function validateTable() {\n        return Object.values(courseRecord).length > 0 /*&& !checkSemester(semesterInfo)*/ && coRequirements;\n    }\n\n    function validateCourse() {\n        return preRequirements && department != \"\" && courseID != 0 && title != \"\" && description != \"\"  && preReqs != [[]] && coReqs != [[]] && semestersOffered != []  /*&& semestersOffered.includes(season)*/;\n    }\n\n    useEffect (() => {\n        setShowCoWarning(false);\n        validateCoRequirements();\n    }, [courseRecord]);\n\n    function validateCoRequirements(){\n        //Iterate through each course  \n        const courseArray: Course[] = Object.values(courseRecord);\n        let valid_course = true;\n        for (let i = 0; i < courseArray.length; i++){\n            //If there are no prerequisites, the course is valid, you can probably just break here.\n            if (courseArray[i].coReqs[0][0] == \"\"){\n                setCoRequirements(true);    \n                return;\n            }\n\n            //We look in each prerequisite structure, which holds the keys we are looking for\n            for (let j = 0; j < courseArray[i].coReqs.length; j++){\n                //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n                for (let h = 0; h < courseArray[i].coReqs[j].length; h++){\n                    //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                    const temp: string = courseArray[i].coReqs[j][h];\n                    if (!courseRecord[temp]){\n                        valid_course = false;\n                    }else{\n                        valid_course = true; \n                        break;\n                    }\n                }\n            }    \n            if (valid_course){\n                setShowCoWarning(false);\n                setCoRequirements(true);\n            } else {\n                setShowCoWarning(true);\n                setCoRequirements(false);\n            }\n        }\n    }\n    \n    function validatePreRequirements(course: Course){\n        //Iterate through each course   \n        let valid_course = true;\n        //If there are no prerequisites, the course is valid, you can probably just break here.\n        if (course.preReqs[0][0] == \"\"){\n            setPreRequirements(true);\n            return;\n        }\n\n        //We look in each prerequisite structure, which holds the keys we are looking for\n        for (let j = 0; j < course.preReqs.length; j++){\n            //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n            for (let h = 0; h < course.preReqs[j].length; h++){\n                //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                console.log(course.preReqs[j][h]);\n                if (!checkCourse(course.preReqs[j][h])){\n                    valid_course = false;\n                }else{\n                    valid_course = true;\n                    break;\n                }\n            }\n        }    \n        if (valid_course){\n            //bypass linter, remove later\n            setFufills(\"Lab Requirements\");\n            \n            setPreRequirements(true);\n        } else {\n            setShowPreWarning(true);\n            setPreRequirements(false);\n        }\n    }\n   \n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n\n        const key = department + courseID;\n\n        let course: Course = {\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            fufills: \"\",\n            semestersOffered: []\n        };\n        \n        if(catalog[key]){\n            course = getCourse(department, courseID);\n            setCourseInfo(course);\n            setShowCard(true);\n        }else{\n            setShowCard(false);\n        }\n\n        setShowPreWarning(false);\n        validatePreRequirements(course);\n        setTitle(course.title);\n        setDescription(course.description);\n        setCredits(course.credits);\n        setPreReqs(course.preReqs);\n        setCoReqs(course.coReqs);\n        setFufills(course.fufills);\n        setSemestersOffered(course.semestersOffered);\n        \n    }\n\n    function addCourse(newCourse: Course){ \n        const courseKey: string = newCourse.department + newCourse.courseID;\n\n        setCourseRecord({...courseRecord, [courseKey]: newCourse});\n        setCreditTotal(determineCreditTotal(courseRecord));\n        setExpectedTuition(expectedTuition);\n    }\n\n    function getCourse(department: string, id: number): Course{\n        const name = department + id;\n        \n        return catalog[name];\n    }\n\n    function clearCourseRecord(){\n        setShowCoWarning(false);\n        setCourseRecord({});\n    }\n\n    function saveSemester(){\n        addSemester(semesterInfo);\n        clearData();\n        setShowCard(false);\n        hide();\n    }\n\n    function determineCreditTotal(record: Record<string, Course>) {\n        let total = 0;\n        const courses = Object.values(record);\n\n        for(let i = 0; i<courses.length; i++){\n            total += courses[i].credits;\n        }\n        return total;\n    }\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        switch(word){\n        case \"Winter\":\n            setSeason(0);\n            break;\n        case \"Spring\":\n            setSeason(1);\n            break;\n        case \"Summer\":\n            setSeason(2);\n            break;\n        case \"Fall\":\n            setSeason(3);\n            break;\n        }\n    }\n\n    function displayReqs(s: string[][]){\n        let i;\n        if(showCard){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \" or \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseRecord({});\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([[\"\"]]);\n        setCoReqs([[\"\"]]);\n        setSemestersOffered([]);\n\n        setShowPreWarning(false);\n        setShowCard(false);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"xl\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"CourseID-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"add-course-button\" id=\"add-course-button\" onClick={()=>addCourse(courseInfo)} disabled={!validateCourse()}>\n                            Add\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\" placeholder=\"Year\"\n                            min={determineYear()}\n                            max={(determineYear() + 6)}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                {showPreWarning && \n                    <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                        </svg>\n                        <div style = {{ paddingLeft: 10 }}>\n                            You cannot add this course to your semester as it&apos;s prerequisite(s) has not been fufilled in a previous semester ({displayReqs(preReqs)})\n                        </div>\n                    </div>}\n                <Row>\n                    <Col>\n                        {showCard && <CourseCardDisplay courseInfo = {courseInfo} setCourseInfo = {setCourseInfo} showCard={showCard}></CourseCardDisplay>}\n                    </Col>\n                    <Col>\n                        <CardPool showCard={showCard}></CardPool>\n                    </Col>\n                </Row>\n                <Row>\n                    {showCoWarning && \n                    <div className=\"alert alert-warning d-flex align-items-center\" role=\"alert\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                        </svg>\n                        <div style = {{ paddingLeft: 10 }}>\n                            You cannot save this semester until you add the corequisites for your courses: {displayReqs(coReqs)}\n                        </div>\n                    </div>}\n                    <SemesterTable semester={{season, year, courseRecord, creditTotal, expectedTuition}} addCourse={addCourse}></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseRecord}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n/**\n * Creates a Card containing all of the Semester information (SemesterTable),\n * macro data such as cost of attendance and total credits, a deleteSemester \n * button, etc.\n * @param semester A semester.\n * @param deleteSemester Deletes a single semester from the plan.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Navbar\n */\nexport function SemesterCard({ semester, deleteSemester, editCourseLauncher, deleteCourse }: {\n    semester: Semester;\n    deleteSemester: (semester: Semester) => void;\n    editCourseLauncher: ({course, semester}: {course: Course, semester:Semester}) => void;\n    deleteCourse: ({course, semester}: {course: Course, semester:Semester}) => void;\n}): JSX.Element {\n    /**\n     * Gets the string value of a given Season enum.\n     * @param season A season enum.\n     *\n     * @returns {string} The passed in season's string value.\n     */\n    function getSeason(season: Season): string{\n        switch(season) {\n        case 3:\n            return \"Fall\";\n        case 0:\n            return \"Winter\";\n        case 1:\n            return \"Spring\";\n        case 2:\n            return \"Summer\";\n        default:\n            return \"Inproper Semester\";\n        }\n    }\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container>\n                    <Row>\n                        <div className=\"flex-container\">\n                            {/* <div className=\"left-semester-container\"></div> */}\n                            <div className=\"middle-semester-container\">\n                                <Col>\n                                    <h1>{\"Semester: \" + getSeason(semester.season) + \" \" + semester.year}</h1>\n                                </Col>\n                            </div>\n                            <div className=\"right-semester-container\">\n                                <Button variant=\"danger\" size=\"sm\" onClick={() => deleteSemester(semester)}>\n                                    Delete Semester\n                                </Button>\n                            </div>\n                        </div>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Courses:</Card.Title>\n                <Row>\n                    <SemesterTable\n                        semester={semester}\n                        editCourseLauncher={editCourseLauncher}\n                        deleteCourse={deleteCourse}\n                    ></SemesterTable>\n                </Row>\n                <p>PLACEHOLDER FOR SEMESTER STATS (TOT CREDITS, ESTIMATED COST, ETC)</p>\n            </Card.Body>\n            <Card.Footer>\n                {(semester.season % 2) && <Button variant=\"primary\">Add Semester: {getSeason((semester.season + 1) % 4)}</Button>}\n            </Card.Footer>\n        </Card>   \n    );\n}","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n/**\n * Renders the SemesterCards as a 2xn \"table\" in order, effectively creating\n * a viewable plan.\n * \n * @param semesters A list of semesters.\n * @param deleteSemester Deletes a single semester from the plan.\n * @param showModal Shows the AddSemesterModal.\n * @param editCourseLauncher Launches the editCourse Modal.\n * @param deleteCourse Deletes a course.\n *\n * @returns {JSX.Element} A JSX.Element containing the rendered plan.\n */\nexport function PlanTable({ semesters, deleteSemester, showModal, editCourseLauncher, deleteCourse }: {\n    semesters: Semester[];\n    deleteSemester: (semester: Semester) => void;\n    showModal: (b:boolean) => void;\n    editCourseLauncher: ({course, semester}: {course: Course, semester:Semester}) => void;\n    deleteCourse: ({course, semester}: {course: Course, semester:Semester}) => void;\n}): JSX.Element {\n\n    const sortedSemesters = semesters.sort(compareSeason).sort(compareYear);\n\n    /**\n     * Calculates the difference between two semesters' years.\n     * @param a The first Semester.\n     * @param b The second Semester.\n     *\n     * @returns {number} Number of years between Semester a and Semester b.\n     */\n    function compareYear(a: Semester, b: Semester):number {\n        return a.year - b.year;\n    }\n\n    /**\n     * Calculates the difference between two semesters' seasons.\n     * @param a The first Semester.\n     * @param b The second Semester.\n     *\n     * @returns {number} Number of seasons between Semester a and Semester b.\n     */\n    function compareSeason(a: Semester, b: Semester):number {\n        return a.season - b.season;\n    }\n    \n    /**\n     * Creates a SemesterCard of a single Semester\n     * @param the_semester A Semester.\n     *\n     * @returns {JSX.Element} A SemesterCard for the_semester.\n     */\n    function renderList(the_semester: Semester): JSX.Element {\n        return (\n            <SemesterCard\n                key={the_semester.season.toString() + the_semester.year.toString()}\n                semester={the_semester} \n                deleteSemester={deleteSemester}\n                editCourseLauncher={editCourseLauncher}\n                deleteCourse={deleteCourse}\n            ></SemesterCard>\n        );\n    }\n\n    /**\n     * Renders a SemesterCard pair, or a SemesterCard and a AddSemester button\n     * on the PlanTable\n     * @param truncatedSemesterCardArray An array (of size 1 or 2) of SemesterCards,\n     * containing semesters from the plan.\n     *\n     * @returns {JSX.Element} A <Row> containing the SemesterCard pair / \n     * SemesterCard + AddSemester button.\n     */\n    function listDisplay(truncatedSemesterCardArray: JSX.Element[]): JSX.Element {\n\n        if (!(truncatedSemesterCardArray.length % 2)) {\n            return (\n                <Row key={truncatedSemesterCardArray[0].key}>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                        {truncatedSemesterCardArray[1]}\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <Row key={truncatedSemesterCardArray[0].key}>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                    </Col>\n                </Row>\n            );\n        }\n    }\n\n    const semesterJSX: JSX.Element[] = sortedSemesters.map(renderList);\n    semesterJSX.push(<Card><Button\n        className=\"button\"\n        data-testid=\"add-semester-button-plan-table\"\n        id=\"add-semester-button-plan-table\"\n        onClick={()=>showModal(true)}>Add Semester</Button></Card>);\n    const semesterPairs: JSX.Element[][] = [];\n\n    for(let i = 0; i < semesterJSX.length; i += 2) {\n        semesterPairs.push(semesterJSX.slice(i, i + 2));\n    }\n    \n\n    return (\n        <div className=\"plan-table\" data-testid= \"plan-table\" id=\"plan-table\">\n            {semesterPairs.map(listDisplay)}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, ModalFooter } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\n/**\n * Creates a Modal that contains a Form (with verification) to edit a given Course.\n * @param setEditCourseVisible Sets the visibility of EditCourseModal.\n * @param editCourseVisible Visibility of EditCourseModal.\n * @param course A course.\n * @param setCurrentCourse Sets the current course that is being edited.\n * @param editCourse Removes the course that has been edited and adds the \n * updated course in its place.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Modal with embedded Form.\n */\nexport function EditCourseModal({ setEditCourseVisible, editCourseVisible, course, editCourse}: {\n    setEditCourseVisible: (b:boolean) => void;\n    editCourseVisible: boolean;\n    course: Course;\n    setCurrentCourse: (c:Course) => void;\n    editCourse: (c:Course) => void;\n}): JSX.Element {\n\n    const [newCourse, setNewCourse] = useState<Course>(course);\n\n    const [validated, setValidated] = useState(false);\n    const hide = ()=>setEditCourseVisible(false);\n\n    function resetCourseHooks(): void {\n        setNewCourse({\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            semestersOffered: [],\n            fufills: \"\"\n        });\n    }\n \n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>):void => {\n        event.preventDefault();\n        const form: HTMLFormElement = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            setValidated(true);\n            const inputValueArray: string[] = new Array(form.elements.length - 1);\n            for (let i = 0; i<form.elements.length - 1; i++) { // -1 is to remove the button\n                const copyElement: HTMLInputElement = form.elements[i] as HTMLInputElement;\n                inputValueArray[i] = copyElement.value;\n            }\n            console.log(inputValueArray);\n            const updateNewCourse: Course = {\n                department: inputValueArray[0],\n                courseID: parseInt(inputValueArray[1]),\n                title: inputValueArray[2],\n                description: inputValueArray[3],\n                credits: parseInt(inputValueArray[4]),\n                preReqs: course.preReqs,\n                coReqs: course.coReqs,\n                semestersOffered: course.semestersOffered,\n                fufills: \"\"\n            };\n            setNewCourse(updateNewCourse);\n        }\n        \n    };\n\n    function saveCourse() {\n        console.log(newCourse);\n        editCourse(newCourse);\n        resetCourseHooks();\n        setValidated(false);\n        hide();\n    }\n\n    return(\n        <Modal\n            data-testid=\"edit-course-modal\"\n            show={editCourseVisible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            size=\"lg\">\n            <ModalHeader closeButton onClick={resetCourseHooks}>\n                <Modal.Title>Edit {course.department + course.courseID}</Modal.Title>\n            </ModalHeader>\n\n            <ModalBody>\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationDepartment\">\n                            <Form.Label>Department</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"ABCD or ABC\"\n                                defaultValue={course.department}\n                                minLength={3}\n                                maxLength={4}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Department!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Department! Please provide a 3-4 \n                                character long Department tag (ex. ENGL)\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCourseID\">\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"number\"\n                                placeholder=\"123\"\n                                defaultValue={course.courseID}\n                                pattern=\"\\d*\"\n                                minLength={3}\n                                maxLength={3}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Course ID!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Course ID! Please include a 3 digit Course ID (ex. 123). \n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationTitle\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"Introduction to Course Registration\"\n                                defaultValue={course.title}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Title!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Title! Please include a valid title (ex. Introduction to Course Registration). \n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"validationDescription\">\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control\n                                required\n                                as=\"textarea\"\n                                style={{ height: \"100px\" }}\n                                type=\"text\"\n                                placeholder={(\"Principles of how to plan a schedule, incluing how breadths work, what\" +\n                                    \"BlueHenPlanner is and how it works, where to find your registration appointment\" +\n                                    \"date and time, etc.\")}\n                                defaultValue={course.description}\n                            />\n                            <Form.Control.Feedback>\n                                Valid description!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid description.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationCredits\">\n                            <Form.Label>Credits</Form.Label>\n                            <Form.Control\n                                required\n                                as=\"select\"\n                                aria-label=\"Floating label select example\"\n                                type=\"number\"\n                                defaultValue={course.credits}\n                            >\n                                <option value={0}>0</option>\n                                <option value={1}>1</option>\n                                <option value={2}>2</option>\n                                <option value={3}>3</option>\n                                <option value={4}>4</option>\n                                <option value={5}>5</option>\n                                <option value={6}>6</option>\n                            </Form.Control>\n                            <Form.Control.Feedback>\n                                Valid credit total!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid credit total between 1 and 9.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationSemestersOffered\">\n                            <Form.Label>Semesters Offered</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                defaultValue={course.semestersOffered.toString()}                            \n                            />\n                            <Form.Control.Feedback>\n                                Valid Semesters!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide valid Semester(s) offered (ex. Fall, Spring).\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Button\n                        variant=\"primary\"\n                        type=\"submit\"\n                    >Check Course Changes</Button>\n                </Form>\n            </ModalBody>\n            <ModalFooter>\n                {validated && <Button\n                    className=\"button\"\n                    id=\"save-course-button\"\n                    onClick={saveCourse}>Save Course</Button>}\n            </ModalFooter>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Course } from \"../interface/course\";\nimport \"bootstrap/dist/js/bootstrap.bundle\";\nimport { Popover, OverlayTrigger } from \"react-bootstrap\";\nexport function RequiredDegreeList({checkCourse, catalog, degree_plan, degree_list}: {\n    checkCourse: (c: string)=>boolean,\n    catalog: Record<string, Course>;\n    degree_plan: string,\n    degree_list: string[]}): JSX.Element{\n    \n    function createList(course: string){\n        let popover_description;\n        let popover_header;\n        if (catalog[course]){\n            popover_header = course;\n            popover_description = catalog[course].description;\n        }else if (course.includes(\" or \")){\n            popover_header = course;\n            popover_description = \"Add either one of these courses to fufill this degree requirement\";\n        }else{\n            popover_header = \"Requirements\";\n            popover_description = \"Some courses fufill requirements, such as breadth requirements. If a course does fufill one but hasn't been included, you can go into the edit course section and modify the 'fufills' field, and put in the desired course\";\n        }\n        const popover = \n            <Popover id=\"popover-basic\">\n                <Popover.Header as=\"h3\">{popover_header}</Popover.Header>\n                <Popover.Body>\n                    {popover_description}\n                </Popover.Body>\n            </Popover>\n        ;\n          \n        if (checkCourse(course)){\n            return(\n                <OverlayTrigger placement=\"right\" overlay={popover}>\n                    <a className=\"list-group-item list-group-item-success\" key = {course}> {course} </a>\n                </OverlayTrigger>\n            );\n        }else{\n            return(\n                <OverlayTrigger  placement=\"right\" overlay={popover}>\n                    <a className=\"list-group-item list-group-item-action\" key = {course}> {course} </a>\n                </OverlayTrigger>\n            );\n        }\n    }\n    return(\n        <div className = \"TEST\">\n            <button type=\"button\" className=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#exampleModalLong\">\n                Degree Audit\n            </button>\n            <div className=\"modal fade\" id=\"exampleModalLong\" role=\"dialog\" aria-labelledby=\"exampleModalLongTitle\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"exampleModalLongTitle\"> {degree_plan} </h5>\n                        </div>\n                        <div className=\"modal-body\">\n                            <div id = \"required_degree_list\">\n                                <div className=\"list-group w-100\" key = \"degree_requirements\" id = \"degree_requirements\">\n                                    {degree_list.map(createList)}\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/University_of_Delaware_wordmark.99b5a349.svg\";","import React, { Navbar, Nav, NavDropdown, Container } from \"react-bootstrap\";\nimport UDLogo from \"../Assets/University_of_Delaware_wordmark.svg\";\n/**\n * Creates a Navbar that contains the University of Delaware logo, a \n * deleteAllSemesters button, a DropDown with upload and download csv. buttons, \n * etc.\n * @param deleteAllSemesters Deletes all semesters from the plan.\n *\n * @returns {JSX.Element} A JSX.Element containing a custom Navbar\n */\nexport function SchedulerNavbar({deleteAllSemesters, setDegreePlan, setDegreeRequirements, degree_plan_list}: {\n    deleteAllSemesters: () => void\n    setDegreeRequirements: (p: string[])=>void,\n    setDegreePlan: (p: string)=>void,\n    degree_plan_list: Record<string, string[]>}): JSX.Element {\n\n\n    function updateDegree(plan: string){\n        setDegreePlan(plan);\n        setDegreeRequirements(degree_plan_list[plan]);\n    }\n    function createDegreeDropDown(plan: string){\n        return (\n            <NavDropdown.Item eventKey=\"changedegreeplan\" onClick = {()=>updateDegree(plan)}>{plan}</NavDropdown.Item>\n        );\n    } \n\n    return (\n        <Navbar\n            data-testid=\"scheduler-navbar\"\n            bg=\"light\"\n            variant=\"light\"\n            sticky=\"top\"\n            expand=\"xxl\">\n            <Container>\n                <Navbar.Brand href=\"#home\">\n                    <img\n                        alt=\"UD Logo\"\n                        src={UDLogo}\n                        width=\"140px\"\n                        height=\"60px\"\n                        className=\"img-responsive\"\n                    />\n                    {\"\"}\n                </Navbar.Brand>\n                <Nav className=\"sch-nav\" justify={true}>\n                    <Nav.Item>\n                        <Nav.Link \n                            id=\"delete-all-semesters-nav\"\n                            onClick = {() => deleteAllSemesters()}\n                        >Delete All Semesters</Nav.Link>\n                    </Nav.Item>\n                    <NavDropdown title=\"Set Degree Plan\">\n                        {Object.keys(degree_plan_list).map(createDegreeDropDown)} \n                    </NavDropdown>\n                    <NavDropdown title=\"scheduleDropdown\" id=\"sch-dropdown\">\n                        <NavDropdown.Item eventKey=\"downloadcsv\">Download as .csv</NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"uploadcsv\">Upload .csv</NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Nav.Link\n                    className=\"ud-catalog-link\"\n                    href=\"https://catalog.udel.edu/\"\n                    target=\"_blank\"\n                >\n                    <strong>UD Catalog</strong>\n                </Nav.Link>\n            </Container>\n        </Navbar>\n    );\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Course } from \"./interface/course\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\nimport { EditCourseModal } from \"./Components/EditCourseModal\";\nimport { RequiredDegreeList } from \"./Components/RequiredDegreeList\";\nimport courseData from \"./Assets/courseData.json\";\nimport courseCatalog from \"./Assets/testcourses.json\";\nimport degreePlanList from \"./Assets/degreeplans.json\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { SchedulerNavbar } from \"./Components/SchedulerNavbar\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n    const catalog: Record<string, Course> = courseCatalog;\n    const [degreePlan, setDegreePlan] = useState<string>(\"Computer Science: (BS)\");\n    const [degreeRequirements, setDegreeRequirements] = useState<string[]>(degreePlanList[\"Computer Science: (BS)\"]);\n    const [editCourseVisible, setEditCourseVisible] = useState<boolean>(false);\n    const [currentCourse, setCurrentCourse] = useState<Course>({\n        department: \"\",\n        courseID: 0,\n        title: \"\",\n        description: \"\",\n        credits: 0,\n        preReqs: [[\"\"]],\n        coReqs: [[\"\"]],\n        semestersOffered: [],\n        fufills: \"\"\n    });\n    const [semesterIndex, setSemesterIndex] = useState<number>(0);\n\n    function setUp(){\n        courseData.forEach((json_course)=>{\n            const course_entry: Course = {\n                department: \"\",\n                courseID: 0,\n                title: \"\",\n                description: \"\",\n                credits: 0,\n                preReqs: [],\n                coReqs: [[\"\"]],\n                fufills: \"\",\n                semestersOffered: []\n            };\n            //Split the courseID into the number. \"CISC 106\" -> \"CISC\" + \"106\"\n            const courseID_split: string[] = json_course.courseID.split(\" \");\n            course_entry.department = courseID_split[0];\n            course_entry.courseID =  parseInt(courseID_split[1]);\n\n            const title_split: string[] = json_course.title.split(\"- \");\n            course_entry.title = title_split[1];\n            course_entry.description = json_course.description;\n            course_entry.credits = parseInt(json_course.credits);\n            if (json_course.prereqs != []){\n                json_course.prereqs.forEach((prereq)=>{\n                    prereq.replace(\" \", \"\");\n                });\n                course_entry.preReqs.push(json_course.prereqs);\n            }else{\n                course_entry.preReqs.push([\"\"]);\n            }\n            \n            //Handling fufillments\n            if (json_course[\"University Breadth\"] != \"\"){\n                const fufilled_breadth = json_course[\"University Breadth\"].substr(1);\n                course_entry.fufills = fufilled_breadth;\n            }\n            const key: string = course_entry.department + course_entry.courseID;\n            catalog[key] = course_entry;\n        });\n    }\n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        setPlan([]);\n    }\n    function checkCourse(course: string): boolean {\n        let i;\n        if (course.includes(\" or \")){\n            const courses: string[] = course.split(\" or \", 2);\n            for(i = 0; i<plan.length; i++){\n                if(plan[i].courseRecord[courses[0]] || plan[i].courseRecord[courses[1]]){\n                    return true;\n                }\n            }\n            return false;\n        }else if (course.includes(\"Credits\")){\n            const requirement: string[] = course.split(\": \");\n            const nondigits = new RegExp(\"[a-zA-Z:/ ]\", \"g\");\n            const credits_needed = parseInt(course.replace(nondigits, \"\"));\n            let credit_count = 0;\n            for(i = 0; i<plan.length; i++){\n                const course_array: Course[] = Object.values(plan[i].courseRecord);\n                for (let j = 0; j < course_array.length; j++){\n                    if (course_array[j].fufills === requirement[0]){\n                        credit_count += course_array[j].credits;\n                    }\n                }\n            }\n\n            if (credit_count >= credits_needed){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            for(i = 0; i<plan.length; i++){\n                if(plan[i].courseRecord[course]){\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    function editCourse(course: Course) {\n        const editSemesterIndex: number = semesterIndex;\n        delete plan[editSemesterIndex].courseRecord[currentCourse.department + currentCourse.courseID];\n        plan[editSemesterIndex].courseRecord = {...plan[editSemesterIndex].courseRecord, [course.department + course.courseID]: course};\n        setPlan([...plan]);\n    }\n\n    function deleteCourse({course, semester}: {\n        course: Course;\n        semester: Semester;\n    }): void {\n        const deleteSemesterIndex: number = checkSemester(semester);\n        delete plan[deleteSemesterIndex].courseRecord[course.department + course.courseID];\n        setPlan([...plan]);\n    }\n\n    function editCourseLauncher({course, semester}: {\n        course: Course;\n        semester: Semester;\n    }): void {\n        setSemesterIndex(checkSemester(semester));\n        setCurrentCourse(course);\n        setEditCourseVisible(true);\n    }\n\n    function deleteSemester(semester: Semester) {\n        let deleteSemesterIndex = 0;\n        for(let i = 0; i < plan.length; i++) {\n            if(semester.season === plan[i].season && semester.year === plan[i].year) {\n                deleteSemesterIndex = i;\n            }\n        }\n        const newPlan = [...plan];\n        newPlan.splice(deleteSemesterIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    function checkSemester(semesterToCheck: Semester): number {\n        for(let semesterIndex = 0; semesterIndex<plan.length; semesterIndex++){\n            if(semesterToCheck.year === plan[semesterIndex].year && semesterToCheck.season === plan[semesterIndex].season)\n                return semesterIndex;\n        }\n        return -1;\n    }\n\n    //Adds all courses to the course catalog\n    setUp();\n    return (\n        <DndProvider backend = {HTML5Backend}>\n            <Container className=\"App\">\n                <header></header>\n                <SchedulerNavbar\n                    deleteAllSemesters={deleteAllSemesters}\n                    setDegreeRequirements = {setDegreeRequirements}\n                    setDegreePlan = {setDegreePlan}\n                    degree_plan_list = {degreePlanList}\n                ></SchedulerNavbar>\n                <Row>\n                    <AddSemesterModal\n                        addSemester={addSemester}\n                        /*checkSemester={checkSemester}*/\n                        setVisible={setVisible}\n                        checkCourse={checkCourse}\n                        visible={visible}\n                        catalog={catalog}\n                    ></AddSemesterModal>\n                    <EditCourseModal\n                        setEditCourseVisible={setEditCourseVisible}\n                        editCourseVisible={editCourseVisible}\n                        course={currentCourse}\n                        setCurrentCourse={setCurrentCourse}\n                        editCourse={editCourse}\n                    ></EditCourseModal>\n                    <RequiredDegreeList\n                        checkCourse = {checkCourse}\n                        catalog = {catalog}\n                        degree_plan = {degreePlan}\n                        degree_list={degreeRequirements}\n                    ></RequiredDegreeList>\n                </Row>\n                <Row>\n                    <PlanTable\n                        semesters={plan}\n                        deleteSemester={deleteSemester}\n                        showModal={setVisible}\n                        editCourseLauncher={editCourseLauncher}\n                        deleteCourse={deleteCourse}\n                    ></PlanTable>\n                </Row>\n                <Row>\n                </Row>\n            </Container>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}