{"version":3,"sources":["Components/ControlPanel.tsx","Components/SemesterTable.tsx","Components/AddSemesterModal.tsx","Components/PlanTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","showModal","Col","Row","Button","className","id","onClick","SemesterTable","semester","getSeason","season","Table","scope","courseList","map","course","index","department","courseID","year","AddSemesterModal","addSemester","setVisible","visible","useState","setSeason","setYear","setCourseList","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","setDepartment","setCourseID","description","setDescription","credits","setCredits","preReqs","setPreReqs","coReqs","setCoReqs","semestersOffered","setSemestersOffered","hide","determineSeason","word","clearData","Modal","show","onHide","backdrop","keyboard","datatestid","size","ModalHeader","closeButton","ModalBody","Form","onSubmit","event","preventDefault","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","type","min","valueAsNumber","disabled","length","FormCheck","inline","name","label","checked","e","FormControl","Date","getFullYear","variant","PlanTable","semesters","the_semester","App","plan","setPlan","Container","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc700227.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\n\nexport function ControlPanel({showModal}: {showModal: (b:boolean)=>void}): JSX.Element{\n\n    return (\n        <Col>\n            <Row>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button className=\"button\" id=\"add-semester-button\" onClick={()=>showModal(true)}>Add Semester</Button>\n                </Col>\n            </Row>\n        </Col>\n    );\n}","import React from \"react\";\nimport { Col, Table } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n\nexport function SemesterTable({semester}: {semester: (Semester)}): JSX.Element {\n\n    function getSeason(){\n        switch(semester.season) {\n        case 0:\n            return \"Fall\";\n        case 1:\n            return \"Winter\";\n        case 2:\n            return \"Spring\";\n        case 3:\n            return \"Summer\";\n        }\n    }\n\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"semester-season\">{getSeason()}</td>\n                <td id=\"semester-year\">{semester.year}</td>\n            </tr>\n        );\n    }\n\n    return (\n        <Col>\n            <Table>\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th scope=\"col\">Course</th>\n                        <th scope=\"col\">Season</th>\n                        <th scope=\"col\">Year</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {semester.courseList.map(renderList)}\n                </tbody>\n            </Table>\n        </Col>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function AddSemesterModal({ addSemester, setVisible, visible}:{\n    addSemester: (s: Semester)=>void,\n    setVisible: (v:boolean)=>void,\n    visible: (boolean)}): JSX.Element {\n\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(2022);\n    const [courseList, setCourseList] = useState<Course[]>([]);\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<Course[]>([]);\n    const [coReqs, setCoReqs] = useState<Course[]>([]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([1]);\n\n\n    const hide = ()=>setVisible(false);\n\n    /* implement with drag function\n    function addCourse(course: Course){\n        setCourseList([...courseList, course]); \n    }*/\n\n    function validateForm() { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100;\n    }\n\n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n        // For now this adds the courses to the table via the last call, \n        // in the future it will just search for a class to display before they decide to drag it into the table or not\n        // \n        //These set calls below are just place holders so the code will build\n        //setSeason(1);\n        //setYear(2022);\n        setCreditTotal(0);\n        setExpectedTuition(0);\n\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([]);\n        setCoReqs([]);\n        setSemestersOffered([1]);\n\n        setCourseList([...courseList, {department, courseID, description, credits, preReqs, coReqs, semestersOffered}]);\n    }\n\n    function clearCourseList(){\n        setCourseList([]);\n    }\n\n    function saveSemester(){\n        addSemester({season, year, courseList, creditTotal, expectedTuition});\n        clearData();\n        hide();\n    }\n\n    /*function determineCreditTotal({list}: {list: Course[]}) {\n        var i = 0;\n        var total = 0;\n        while(i != list.length){\n            total += list[i].credits;\n            i++\n        }\n    }*/\n\n    /*function addCourse(course: Course){\n        setCourseList([...courseList, course]);\n        determineCreditTotal(courseList);\n    }*/\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        if(word === \"Fall\"){\n            setSeason(0);\n        } else if(word === \"Winter\"){\n            setSeason(1);\n        } else if(word === \"Spring\"){\n            setSeason(2);\n        } else if(word === \"Summer\"){\n            setSeason(3);\n        }\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseList([]);\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([]);\n        setCoReqs([]);\n        setSemestersOffered([]);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            datatestid=\"add-semester-modal\"\n            size=\"lg\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl id=\"year-input\" as=\"input\" type=\"number\"\n                            min={determineYear()}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    <SemesterTable semester={{season, year, courseList, creditTotal, expectedTuition}}></SemesterTable>\n                </Row>\n                <Row>\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseList}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n\n\nexport const PlanTable = ({semesters}: {semesters: Semester[]}): JSX.Element => {\n\n    function renderList(the_semester: Semester){\n        return (\n            <SemesterTable semester = {the_semester}></SemesterTable>\n        );\n    }\n\n    return (\n        <div className = \"plan-table\">\n            {semesters.map(renderList)}\n        </div>\n    );\n};","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Button, Container, Row } from \"react-bootstrap\";\nimport { ControlPanel } from \"./Components/ControlPanel\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n\n    function addSemester(semester:Semester){\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters(){\n        setPlan([]);\n        console.log(\"Deleted All Semesters\");\n    }\n\n    return (\n        <Container className=\"App\">\n            <Row>\n                <br></br>\n            </Row>\n            <Row>\n                <ControlPanel showModal={setVisible}></ControlPanel>\n            </Row>\n            <Row>\n                <AddSemesterModal addSemester={addSemester} setVisible={setVisible} visible={visible}></AddSemesterModal>\n                <Button className=\"button\" id=\"delete-all-button\" onClick = {() => deleteAllSemesters()}> Delete All Semesters</Button>\n            </Row>\n            <Row>\n                <PlanTable semesters = {plan}></PlanTable>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}