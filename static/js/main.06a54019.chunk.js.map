{"version":3,"sources":["Components/ControlPanel.tsx","Components/SemesterTable.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","Components/RequiredDegreeList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","showModal","deleteAllSemesters","Col","Row","Button","className","id","onClick","variant","SemesterTable","semester","Table","scope","Object","values","courseRecord","map","course","index","department","courseID","title","description","credits","AddSemesterModal","addSemester","checkSemester","setVisible","checkCourse","visible","catalog","useState","season","setSeason","year","setYear","setCourseRecord","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","semesterInfo","setDepartment","setCourseID","setTitle","setDescription","setCredits","preReqs","setPreReqs","coReqs","setCoReqs","semestersOffered","setSemestersOffered","preRequirements","setPreRequirements","coRequirements","setCoRequirements","courseInfo","showCard","setShowCard","showPreWarning","setShowPreWarning","showCoWarning","setShowCoWarning","hide","addCourse","newCourse","courseKey","record","i","total","keys","arr","length","push","determineCreditTotal","determineYear","Date","getFullYear","determineSeason","word","displayReqs","s","phrase","clearData","useEffect","courseArray","valid_course","console","log","j","h","temp","validateCoRequirements","Modal","show","onHide","backdrop","keyboard","size","ModalHeader","closeButton","ModalBody","Form","onSubmit","event","preventDefault","getCourse","validatePreRequirements","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","type","min","valueAsNumber","disabled","includes","FormCheck","inline","name","label","checked","e","FormControl","placeholder","max","Card","style","paddingTop","Body","role","xmlns","width","height","fill","viewBox","d","paddingLeft","Title","Text","forEach","displaySemesters","SemesterCard","deleteSemester","getSeason","bg","Header","Container","Footer","PlanTable","semesters","semesterJSX","sort","a","b","the_semester","toString","semesterPairs","slice","truncatedSemesterCardArray","RequiredDegreeList","degree_list","App","plan","setPlan","courseCatalog","degreePlan","setDegreePlan","requiredCourses","setRequiredCourses","violations","checkDegreePlan","semesterToCheck","deleteSemesterIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06a54019.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\n\nexport function ControlPanel({showModal, deleteAllSemesters}: {showModal: (b:boolean)=>void, deleteAllSemesters: () => void}): JSX.Element{\n\n    return (\n        <Col data-testid=\"control-panel\">\n            <Row>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button className=\"button\" data-testid=\"add-semester-modal-button\" id=\"add-semester-modal-button\" onClick={()=>showModal(true)}>Add Semester</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                    <Button className=\"button\" variant=\"danger\" id=\"delete-all-semesters-button\" onClick = {() => deleteAllSemesters()}>Delete All Semesters</Button>\n                </Col>\n            </Row>\n        </Col>\n    );\n}","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n\nexport function SemesterTable({semester}: {semester: (Semester)}): JSX.Element {\n\n\n\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"course-title\">{course.title}</td>\n                <td id=\"course-description\">{course.description}</td>\n                <td id=\"course-credits\">{course.credits}</td>\n                <td id=\"course-edit-button\">{\n                    <Button variant=\"primary\">\n                        Edit Course\n                    </Button>\n                }</td>\n            </tr>\n        );\n    }\n\n    return (\n        <Table id=\"semester-table\">\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credits</th>\n                    <th scope=\"col\">Edit:</th>\n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(semester.courseRecord).map(renderList)}\n            </tbody>\n        </Table>\n    );\n}","import React, { useEffect, useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl, Card} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function AddSemesterModal({ addSemester, checkSemester, setVisible, checkCourse, visible, catalog}:{\n    addSemester: (s: Semester)=>void,\n    checkSemester: (c: Semester)=>boolean,\n    setVisible: (v:boolean)=>void,\n    checkCourse: (c: string)=>boolean,\n    visible: (boolean),\n    catalog: (Record<string, Course>)}): JSX.Element {\n\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(1);\n    const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n    const semesterInfo = {season, year, courseRecord, creditTotal, expectedTuition};\n\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<string[][]>([[]]);\n    const [coReqs, setCoReqs] = useState<string[][]>([[]]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([]);\n    const [preRequirements, setPreRequirements] = useState<boolean>(true);\n    const [coRequirements, setCoRequirements] = useState<boolean>(true);\n    const courseInfo = {department, courseID, title, description, credits, preReqs, coReqs, semestersOffered};\n\n    const [showCard, setShowCard] = useState<boolean>(false);\n    const [showPreWarning, setShowPreWarning] = useState<boolean>(false);\n    const [showCoWarning, setShowCoWarning] = useState<boolean>(false);\n    \n    const hide = ()=>setVisible(false);\n\n    function validateForm(): boolean { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100 && year >= determineYear();\n    }\n\n    function validateTable() {\n        return Object.values(courseRecord).length > 0 && !checkSemester(semesterInfo) && coRequirements;\n    }\n\n    function validateCourse() {\n        return preRequirements && department != \"\" && courseID != 0 && title != \"\" && description != \"\" && credits != 0 && preReqs != [[]] && coReqs != [[]] && semestersOffered != []  && semestersOffered.includes(season);\n    }\n\n    useEffect (() => {\n        setShowCoWarning(false);\n        validateCoRequirements();\n    }, [courseRecord]);\n\n    function validateCoRequirements(){\n        //Iterate through each course  \n        const courseArray: Course[] = Object.values(courseRecord);\n        let valid_course = true;\n        for (let i = 0; i < courseArray.length; i++){\n            //If there are no prerequisites, the course is valid, you can probably just break here.\n            if (courseArray[i].coReqs[0][0] == \"\"){\n                console.log(\"Coreqs is empty?\");\n                setCoRequirements(true);\n                return;\n            }\n\n            //We look in each prerequisite structure, which holds the keys we are looking for\n            for (let j = 0; j < courseArray[i].coReqs.length; j++){\n                //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n                console.log(courseArray[i].coReqs[j].length);\n                for (let h = 0; h < courseArray[i].coReqs[j].length; h++){\n                    //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                    console.log(courseArray[i].coReqs[j][h]);\n                    const temp: string = courseArray[i].coReqs[j][h];\n                    console.log(courseRecord[temp]);\n                    if (!courseRecord[temp]){\n                        console.log(\"not in plan\");\n                        valid_course = valid_course && false;\n                    }else{\n                        console.log(\"in plan\");\n                        valid_course = valid_course && true;\n                    }\n                }\n            }    \n            if (valid_course){\n                console.log(\"Valid Course.\");\n                setCoRequirements(true);\n            } else {\n                console.log(\"Invalid Course.\");\n                setShowCoWarning(true);\n                setCoRequirements(false);\n            }\n        }\n    }\n    \n    function validatePreRequirements(course: Course){\n        //Iterate through each course   \n        let valid_course = true;\n        //If there are no prerequisites, the course is valid, you can probably just break here.\n        if (course.preReqs[0][0] == \"\"){\n            console.log(\"Prereqs is empty?\");\n            setPreRequirements(true);\n            return;\n        }\n\n        //We look in each prerequisite structure, which holds the keys we are looking for\n        for (let j = 0; j < course.preReqs.length; j++){\n            //Iterate through each key the list of prerequisites, formatted {[CISC108, CISC106], [MATH241]...}\n            for (let h = 0; h < course.preReqs[j].length; h++){\n                //If the course isnt valid AND it hasnt been set true previously, then the course isnt valid.\n                console.log(course.preReqs[j][h]);\n                if (!checkCourse(course.preReqs[j][h])){\n                    console.log(\"not in plan\");\n                    valid_course = valid_course && false;\n                }else{\n                    console.log(\"in plan\");\n                    valid_course = valid_course && true;\n                }\n            }\n        }    \n        if (valid_course){\n            console.log(\"Valid Course.\");\n            setPreRequirements(true);\n        } else {\n            setShowPreWarning(true);\n            setPreRequirements(false);\n        }\n    }\n   \n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n\n        const key = department + courseID;\n\n        let course: Course = {\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            semestersOffered: []\n        };\n        \n        if(catalog[key]){\n            course = getCourse(department, courseID);\n            setShowCard(true);\n        }\n\n        setShowPreWarning(false);\n        validatePreRequirements(course);\n        setTitle(course.title);\n        setDescription(course.description);\n        setCredits(course.credits);\n        setPreReqs(course.preReqs);\n        setCoReqs(course.coReqs);\n        setSemestersOffered(course.semestersOffered);\n        \n    }\n\n    function addCourse(newCourse: Course){ \n        const courseKey: string = department + courseID;\n\n        setCourseRecord({...courseRecord, [courseKey]: newCourse});\n        setCreditTotal(determineCreditTotal(courseRecord));\n        setExpectedTuition(expectedTuition);\n    }\n\n    function getCourse(department: string, id: number): Course{\n        const name = department + id;\n        \n        return catalog[name];\n    }\n\n    function clearCourseRecord(){\n        setShowCoWarning(false);\n        setCourseRecord({});\n    }\n\n    function saveSemester(){\n        addSemester(semesterInfo);\n        clearData();\n        setShowCard(false);\n        hide();\n    }\n\n    function determineCreditTotal(record: Record<string, Course>) {\n        let i = 0;\n        let total = 0;\n        const keys = Object.keys(record); \n        const arr = [];\n\n        for(i = 0; i<keys.length; i++){\n            arr.push(record[keys[i]]);\n        }\n        \n        while(i != arr.length){\n            total += arr[i].credits;\n            i++;\n        }\n\n        return total;\n    }\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        if(word === \"Fall\"){\n            setSeason(3);\n        } else if(word === \"Winter\"){\n            setSeason(0);\n        } else if(word === \"Spring\"){\n            setSeason(1);\n        } else if(word === \"Summer\"){\n            setSeason(2);\n        }\n    }\n\n    function displayReqs(s: string[][]){\n        let i;\n        if(showCard){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \" or \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n    \n    function displaySemesters(){\n        let i = 0;\n        let phrase = \"\";\n        semestersOffered.forEach((s)=>{\n            switch(s){\n            case 0:\n                phrase = phrase + \"Winter\";\n                break;\n            case 1:\n                phrase = phrase + \"Spring\";\n                break;\n            case 2:\n                phrase = phrase + \"Summer\";\n                break;\n            case 3:\n                phrase = phrase + \"Fall\";\n                break;\n            }\n            \n            i++;\n            if(i<semestersOffered.length)\n                phrase = phrase + \", \";\n        });\n        return phrase;\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseRecord({});\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([[\"\"]]);\n        setCoReqs([[\"\"]]);\n        setSemestersOffered([]);\n\n        setShowPreWarning(false);\n        setShowCard(false);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"lg\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"CourseID-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"add-course-button\" id=\"add-course-button\" onClick={()=>addCourse(courseInfo)} disabled={!validateCourse()}>\n                            Add\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\" placeholder=\"Year\"\n                            min={determineYear()}\n                            max={(determineYear() + 6)}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    {showCard && <Card id=\"course-card\" style = {{paddingTop: 0}}>\n                        <Card.Body>\n                            {showPreWarning && <div className=\"alert alert-danger d-flex align-items-center\" role=\"alert\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                                    <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                                </svg>\n                                <div style = {{ paddingLeft: 10 }}>\n                                    You cannot add this course to your semester as it&apos;s prerequisite(s) has not been fufilled in a previous semester ({displayReqs(preReqs)})\n                                </div>\n                            </div>}\n                            <Card.Title>{department}{courseID}: {title} \n                                <Card.Text> Credits: {credits}</Card.Text>\n                            </Card.Title> \n                            <Card.Text>{description}</Card.Text>\n                            <Card.Text>Prereqs: {displayReqs(preReqs)}</Card.Text> \n                            <Card.Text>Coreqs: {displayReqs(coReqs)}</Card.Text> \n                            <Card.Text>Semesters: {displaySemesters()}</Card.Text>\n                        </Card.Body>\n                    </Card>}\n                </Row>\n                <Row>\n                    {showCoWarning && \n                    <div className=\"alert alert-warning d-flex align-items-center\" role=\"alert\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-exclamation-triangle-fill\" viewBox=\"0 0 16 16\">\n                            <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                        </svg>\n                        <div style = {{ paddingLeft: 10 }}>\n                            You cannot save this semester until you add the corequisites for your courses: {displayReqs(coReqs)}\n                        </div>\n                    </div>}\n                    <SemesterTable semester={{season, year, courseRecord, creditTotal, expectedTuition}}></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseRecord}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function SemesterCard({ semester, deleteSemester }: {\n    semester: Semester;\n    deleteSemester: (semester: Semester) => void;\n}): JSX.Element {\n\n\n    function getSeason(season: Season): string{\n        switch(season) {\n        case 3:\n            return \"Fall\";\n        case 0:\n            return \"Winter\";\n        case 1:\n            return \"Spring\";\n        case 2:\n            return \"Summer\";\n        default:\n            return \"Inproper Semester\";\n        }\n    }\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container>\n                    <Row>\n                        <div className=\"flex-container\">\n                            {/* <div className=\"left-semester-container\"></div> */}\n                            <div className=\"middle-semester-container\">\n                                <Col>\n                                    <h1>{\"Semester: \" + getSeason(semester.season) + \" \" + semester.year}</h1>\n                                </Col>\n                            </div>\n                            <div className=\"right-semester-container\">\n                                <Button variant=\"danger\" onClick={() => deleteSemester(semester)}>\n                                    Delete Semester\n                                </Button>\n                            </div>\n                        </div>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Courses:</Card.Title>\n                <Row>\n                    <SemesterTable semester={semester}></SemesterTable>\n                </Row>\n                <p>PLACEHOLDER FOR SEMESTER STATS (TOT CREDITS, ESTIMATED COST, ETC)</p>\n            </Card.Body>\n            <Card.Footer>\n                <Button variant=\"primary\">Add Semester: {getSeason((semester.season + 1) % 4)}</Button>\n            </Card.Footer>\n        </Card>   \n    );\n}","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n\nexport function PlanTable({ semesters, deleteSemester, showModal }: {\n    semesters: Semester[];\n    deleteSemester: (semester: Semester) => void;\n    showModal: (b:boolean) => void;\n}): JSX.Element {\n\n    const sortedSemesters = semesters.sort(compareSeason).sort(compareYear);\n\n    function compareYear(a: Semester, b: Semester){\n        return a.year - b.year;\n    }\n\n    function compareSeason(a: Semester, b: Semester){\n        return a.season - b.season;\n    }\n\n    function renderList(the_semester: Semester): JSX.Element {\n        return (\n            <SemesterCard key={the_semester.season.toString() + the_semester.year.toString()} semester={the_semester} deleteSemester = {deleteSemester}></SemesterCard>\n        );\n    }\n\n    function listDisplay(truncatedSemesterCardArray: JSX.Element[]): JSX.Element {\n\n        if (!(truncatedSemesterCardArray.length % 2)) {\n            return (\n                <Row>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                        {truncatedSemesterCardArray[1]}\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <Row>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                    </Col>\n                </Row>\n            );\n        }\n    }\n\n    const semesterJSX: JSX.Element[] = sortedSemesters.map(renderList);\n    semesterJSX.push(<Card><Button\n        className=\"button\"\n        data-testid=\"add-semester-button-plan-table\"\n        id=\"add-semester-button-plan-table\"\n        onClick={()=>showModal(true)}>Add Semester</Button></Card>);\n    const semesterPairs: JSX.Element[][] = [];\n\n    for(let i = 0; i < semesterJSX.length; i += 2) {\n        semesterPairs.push(semesterJSX.slice(i, i + 2));\n    }\n    \n\n    return (\n        <div className=\"plan-table\" id=\"plan-table\">\n            {semesterPairs.map(listDisplay)}\n        </div>\n    );\n}","import React from \"react\";\n\nexport function RequiredDegreeList({degree_list}: {degree_list: string[]}): JSX.Element{\n    \n    function createList(course: string){\n        return(\n            <a className=\"list-group-item list-group-item-action\" key = {course}> {course} </a>\n        );\n    }\n\n    return(\n        <div className=\"list-group w-25\" id = \"degree_requirements\">\n            <a className=\"list-group-item list-group-item-action active\"> Required Courses </a>\n            {degree_list.map(createList)}\n        </div>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { ControlPanel } from \"./Components/ControlPanel\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Course } from \"./interface/course\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\nimport { RequiredDegreeList } from \"./Components/RequiredDegreeList\";\n\nimport courseCatalog from \"./Assets/testcourses.json\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n    const catalog: Record<string, Course> = courseCatalog;\n    const [degreePlan, setDegreePlan] = useState<string[]>([\"CISC210\", \"MATH241\"]);\n    const [requiredCourses, setRequiredCourses] = useState<string[]>(degreePlan);\n\n    useEffect (() => {\n        checkDegreePlan();\n    }, [plan]);\n    \n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        //just to bypass the linter warning, remove later\n        setDegreePlan(degreePlan);\n\n        setPlan([]);\n        console.log(\"Deleted All Semesters\");\n    }\n\n    function checkCourse(course: string): boolean {\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(plan[i].courseRecord[course]){\n                return true;\n            }\n        }\n        return false;\n    }\n    function deleteSemester(semester: Semester) {\n        let deleteSemesterIndex = 0;\n        for(let i = 0; i < plan.length; i++) {\n            if(semester.season === plan[i].season && semester.year === plan[i].year) {\n                deleteSemesterIndex = i;\n            }\n        }\n        const newPlan = [...plan];\n        newPlan.splice(deleteSemesterIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    function checkDegreePlan() {\n        let violations: string[] = [];\n        for (let i = 0; i < degreePlan.length; i++){\n            //console.log(\"TESTING \" + degreePlan[i]);\n            //console.log(checkCourse(degreePlan[i]));\n            if (!checkCourse(degreePlan[i])){\n                const course: string = degreePlan[i];\n                violations = [...violations, course];\n            }\n        } \n        //It seems that useState does not like trying to set its variable in a loop multiple times\n        setRequiredCourses(violations);\n    }\n    function checkSemester(semesterToCheck: Semester): boolean{\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(semesterToCheck.year === plan[i].year && semesterToCheck.season === plan[i].season)\n                return true;\n        }\n        return false;\n    }\n\n    return (\n        <Container className=\"App\">\n            <Row>\n                <br></br>\n            </Row>\n            <Row>\n                <ControlPanel showModal={setVisible} deleteAllSemesters={deleteAllSemesters}></ControlPanel>\n            </Row>\n            <Row>\n                <AddSemesterModal addSemester={addSemester} checkSemester={checkSemester} setVisible={setVisible} checkCourse = {checkCourse} visible={visible} catalog={catalog}></AddSemesterModal>\n            </Row>\n            <Row>\n                <PlanTable semesters = {plan} deleteSemester = {deleteSemester} showModal={setVisible}></PlanTable>\n            </Row>\n            <Row>\n                <RequiredDegreeList degree_list = {requiredCourses}></RequiredDegreeList>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}