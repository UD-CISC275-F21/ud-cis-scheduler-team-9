{"version":3,"sources":["Components/ControlPanel.tsx","Components/SemesterTable.tsx","Components/AddSemesterModal.tsx","Components/SemesterCard.tsx","Components/PlanTable.tsx","Components/EditCourseModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ControlPanel","showModal","deleteAllSemesters","Col","Row","Button","className","id","onClick","variant","SemesterTable","semester","editCourseLauncher","Table","scope","Object","values","courseRecord","map","course","index","department","courseID","title","description","credits","AddSemesterModal","addSemester","checkSemester","setVisible","visible","catalog","useState","season","setSeason","determineYear","year","setYear","setCourseRecord","creditTotal","setCreditTotal","expectedTuition","setExpectedTuition","semesterInfo","setDepartment","setCourseID","setTitle","setDescription","setCredits","preReqs","setPreReqs","coReqs","setCoReqs","semestersOffered","setSemestersOffered","courseInfo","showCard","setShowCard","hide","addCourse","newCourse","courseKey","record","i","total","keys","arr","length","push","determineCreditTotal","Date","getFullYear","determineSeason","word","displayReqs","s","phrase","clearData","Modal","show","onHide","backdrop","keyboard","size","ModalHeader","closeButton","ModalBody","Form","onSubmit","event","preventDefault","getCourse","Group","Label","Control","as","rows","minLength","maxLength","onChange","ev","target","value","toUpperCase","type","min","valueAsNumber","disabled","FormCheck","inline","name","label","checked","e","FormControl","placeholder","max","Card","Body","Title","Text","forEach","displaySemesters","SemesterCard","deleteSemester","getSeason","bg","Header","Container","Footer","PlanTable","semesters","semesterJSX","sort","a","b","the_semester","toString","semesterPairs","slice","truncatedSemesterCardArray","key","EditCourseModal","setEditSemesterVisible","editSemesterVisible","editCourse","setNewCourse","validated","setValidated","resetCourseHooks","noValidate","form","currentTarget","checkValidity","stopPropagation","inputValueArray","Array","elements","copyElement","console","log","updateNewCourse","parseInt","md","controlId","required","defaultValue","Feedback","pattern","style","height","ModalFooter","App","plan","setPlan","currentCourse","setCurrentCourse","semesterIndex","setSemesterIndex","courseCatalog","semesterToCheck","editSemesterIndex","deleteSemesterIndex","newPlan","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8eae7675.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Row, Button } from \"react-bootstrap\";\n\nexport function ControlPanel({showModal, deleteAllSemesters}: {showModal: (b:boolean)=>void, deleteAllSemesters: () => void}): JSX.Element{\n\n    return (\n        <Col data-testid=\"control-panel\">\n            <Row>\n                <Col>\n\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button className=\"button\" data-testid=\"add-semester-button\" id=\"add-semester-button\" onClick={()=>showModal(true)}>Add Semester</Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                    <Button className=\"button\" variant=\"danger\" id=\"delete-all-semesters-button\" onClick = {() => deleteAllSemesters()}>Delete All Semesters</Button>\n                </Col>\n            </Row>\n        </Col>\n    );\n}","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\n\nexport function SemesterTable({semester, editCourseLauncher}: { \n    semester: (Semester);\n    editCourseLauncher?: ({course, semester}: {course: Course, semester:Semester}) => void;\n    }): JSX.Element {\n\n\n    function renderList(course: Course, index: number){\n        return (\n            <tr key={index}>\n                <td id=\"course-name\">{course.department+course.courseID}</td>\n                <td id=\"course-title\">{course.title}</td>\n                <td id=\"course-description\">{course.description}</td>\n                <td id=\"course-credits\">{course.credits}</td>\n                {editCourseLauncher && <td id=\"course-edit-button\">\n                    <Button variant=\"primary\" onClick={() => editCourseLauncher({course, semester})}>\n                        Edit Course\n                    </Button>\n                    \n                </td>}\n                {editCourseLauncher &&\n                <td>\n                    <Button variant=\"primary\" className=\"btn-block\">\n                        X\n                    </Button>\n                </td>}\n            </tr>\n        );\n    }\n\n    return (\n        <Table id=\"semester-table\">\n            <thead className=\"thead-dark\">\n                <tr>\n                    <th scope=\"col\">Course</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Credits</th>\n                    {editCourseLauncher && <th scope=\"col\">Edit:</th>}\n                    {editCourseLauncher && <th scope=\"col\">Delete:</th>} \n                </tr>\n            </thead>\n            <tbody>\n                {Object.values(semester.courseRecord).map(renderList)}\n            </tbody>\n        </Table>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, FormCheck, FormControl, Card} from \"react-bootstrap\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function AddSemesterModal({ addSemester, checkSemester, setVisible, visible, catalog}:{\n    addSemester: (s: Semester)=>void,\n    checkSemester: (c: Semester)=>number,\n    setVisible: (v:boolean)=>void,\n    visible: (boolean)\n    catalog: (Record<string, Course>)}): JSX.Element {\n\n    const [season, setSeason] = useState<Season>(0);\n    const [year, setYear] = useState<number>(determineYear());\n    const [courseRecord, setCourseRecord] = useState<Record<string, Course>>({});\n    const [creditTotal, setCreditTotal] = useState<number>(0);\n    const [expectedTuition, setExpectedTuition] = useState<number>(0);\n    const semesterInfo = {season, year, courseRecord, creditTotal, expectedTuition};\n\n    const [department, setDepartment] = useState<string>(\"\");\n    const [courseID, setCourseID] = useState<number>(0);\n    const [title, setTitle] = useState<string>(\"\");\n    const [description, setDescription] = useState<string>(\"\");\n    const [credits, setCredits] = useState<number>(0);\n    const [preReqs, setPreReqs] = useState<string[][]>([[]]);\n    const [coReqs, setCoReqs] = useState<string[][]>([[]]);\n    const [semestersOffered, setSemestersOffered] = useState<Season[]>([]);\n    const courseInfo = {department, courseID, title, description, credits, preReqs, coReqs, semestersOffered};\n\n    const [showCard, setShowCard] = useState<boolean>(false);\n    const hide = ()=>setVisible(false);\n\n    function validateForm(): boolean { // Makes sure that no text field is empty before submit\n        return department.length > 0 && courseID >= 100 && year >= determineYear();\n    }\n\n    function validateTable() {\n        return Object.values(courseRecord).length > 0 && (checkSemester(semesterInfo) === -1);\n    }\n\n    function validateCourse() {\n        return department != \"\" && courseID != 0 && title != \"\" && description != \"\" && credits != 0 && preReqs != [[]] && coReqs != [[]] && semestersOffered != [];\n    }\n\n\n    function handleSearch(event: {preventDefault: () => void; }){\n        event.preventDefault();\n\n        const key = department + courseID;\n\n        let course: Course = {\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            semestersOffered: []\n        };\n        \n        if(catalog[key]){\n            course = getCourse(department, courseID);\n            setShowCard(true);\n            \n        }\n\n        setTitle(course.title);\n        setDescription(course.description);\n        setCredits(course.credits);\n        setPreReqs(course.preReqs);\n        setCoReqs(course.coReqs);\n        setSemestersOffered(course.semestersOffered);\n    }\n\n    function addCourse(newCourse: Course){ \n        const courseKey: string = department + courseID;\n\n        setCourseRecord({...courseRecord, [courseKey]: newCourse});\n        setCreditTotal(determineCreditTotal(courseRecord));\n        setExpectedTuition(expectedTuition);\n    }\n\n    function getCourse(department: string, id: number): Course{\n        const name = department + id;\n        \n        return catalog[name];\n    }\n\n    /*function checkCourse(course: string): boolean {\n        let i;\n        for(i = 0; i<plan.length; i++){\n            if(plan[i].courseRecord[course]){\n                return true;\n            }\n        }\n        return false;\n    }*/\n\n    function clearCourseRecord(){\n        setCourseRecord({});\n    }\n\n    function saveSemester(){\n        addSemester(semesterInfo);\n        clearData();\n        setShowCard(false);\n        hide();\n    }\n\n    function determineCreditTotal(record: Record<string, Course>) {\n        let i = 0;\n        let total = 0;\n        const keys = Object.keys(record); \n        const arr = [];\n\n        for(i = 0; i<keys.length; i++){\n            arr.push(record[keys[i]]);\n        }\n        \n        while(i != arr.length){\n            total += arr[i].credits;\n            i++;\n        }\n        return total;\n    }\n\n    function determineYear(){\n        const today = new Date();\n        return today.getFullYear();\n    }\n\n    function determineSeason(word: string){\n        if(word === \"Fall\"){\n            setSeason(3);\n        } else if(word === \"Winter\"){\n            setSeason(0);\n        } else if(word === \"Spring\"){\n            setSeason(1);\n        } else if(word === \"Summer\"){\n            setSeason(2);\n        }\n    }\n\n    function displayReqs(s: string[][]){\n        let i;\n        if(showCard){\n            let phrase = s[0][0];\n            for(i = 1; i<s[0].length; i++){\n                phrase = phrase + \", \" + s[0][i];\n            }\n            return phrase;\n        }\n    }\n    \n    function displaySemesters(){\n        let i = 0;\n        let phrase = \"\";\n        semestersOffered.forEach((s)=>{\n            switch(s){\n            case 0:\n                phrase = phrase + \"Winter\";\n                break;\n            case 1:\n                phrase = phrase + \"Spring\";\n                break;\n            case 2:\n                phrase = phrase + \"Summer\";\n                break;\n            case 3:\n                phrase = phrase + \"Fall\";\n                break;\n            }\n            \n            i++;\n            if(i<semestersOffered.length)\n                phrase = phrase + \", \";\n        });\n        return phrase;\n    }\n\n    function clearData(){\n        // Semester Data\n        setSeason(0);\n        setYear(0);\n        setCourseRecord({});\n        setCreditTotal(0);\n        setExpectedTuition(0);\n        \n        //Course Data\n        setDepartment(\"\");\n        setCourseID(0);\n        setDescription(\"\");\n        setCredits(0);\n        setPreReqs([[\"\"]]);\n        setCoReqs([[\"\"]]);\n        setSemestersOffered([]);\n\n        setShowCard(false);\n    }\n\n    return (\n        <Modal\n            show={visible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"add-semester-modal\"\n            size=\"lg\"\n        >\n            <ModalHeader closeButton onClick={clearData}></ModalHeader>\n            <ModalBody>\n                <Row>\n                    <Form className=\"d-flex\" id=\"search-course-formm\" onSubmit={handleSearch}>\n                        <Form.Group>\n                            <Form.Label>\n                                Department\n                            </Form.Label>\n                            <Form.Control data-testid=\"department-name-input\" id=\"department-name\" as=\"textarea\" rows={1} \n                                minLength={3}\n                                maxLength={4}\n                                onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setDepartment(ev.target.value.toUpperCase())}\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>\n                                Course ID\n                            </Form.Label>\n                            <Form.Control data-testid=\"CourseID-input\" id=\"course-id\" as=\"input\" type=\"number\"\n                                min={100}\n                                onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setCourseID(ev.target.valueAsNumber)}/>\n                        </Form.Group>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"search-course-button\" id=\"search-course-button\" disabled={!validateForm()}>\n                            Search\n                        </Button>\n                        <Button className=\"button\" type=\"submit\" data-testid=\"add-course-button\" id=\"add-course-button\" onClick={()=>addCourse(courseInfo)} disabled={!validateCourse()}>\n                            Add\n                        </Button>\n                    </Form>\n                </Row>\n                <br/>\n                <Row>\n                    <Col>\n                        <FormCheck inline type=\"radio\" value=\"Fall\" name=\"season\" label=\"Fall\" checked={season === 3} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Winter\" name=\"season\" label=\"Winter\" checked={season === 0} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Spring\" name=\"season\" label=\"Spring\" checked={season === 1} onChange={(e) => determineSeason(e.target.value)}/>\n                        <FormCheck inline type=\"radio\" value=\"Summer\" name=\"season\" label=\"Summer\" checked={season === 2} onChange={(e) => determineSeason(e.target.value)}/>\n                    </Col>\n                    <Col>\n                        <FormControl data-testid=\"year-input\" id=\"year-input\" as=\"input\" type=\"number\" placeholder=\"Year\"\n                            min={determineYear()}\n                            max={(determineYear() + 6)}\n                            onChange={(ev: React.ChangeEvent<HTMLInputElement>) => setYear(ev.target.valueAsNumber)}\n                        />\n                    </Col>\n                </Row>\n                <Row>\n                    {showCard && <Card id=\"course-card\">\n                        <Card.Body>\n                            <Card.Title>{department}{courseID}: {title} \n                                <Card.Text> Credits: {credits}</Card.Text>\n                            </Card.Title> \n                            <Card.Text>{description}</Card.Text>\n                            <Card.Text>Prereqs: {displayReqs(preReqs)}</Card.Text> \n                            <Card.Text>Coreqs: {displayReqs(coReqs)}</Card.Text> \n                            <Card.Text>Semesters: {displaySemesters()}</Card.Text>\n                        </Card.Body>\n                    </Card>}\n                </Row>\n                <Row>\n                    <SemesterTable\n                        semester={{season, year, courseRecord, creditTotal, expectedTuition}}\n                        /*editCourse={(c: Course): void => {\n                            if(c) {\n                                console.log(\"Called from AddSemesterModal??? Don't think this is possible.\");\n                            } \n                        }}*/\n                    ></SemesterTable>\n                </Row>\n                <Row data-testid=\"Bottom Row\">\n                    <Col>\n                        <Button className=\"button\" id=\"clear-course-list-button\" variant=\"danger\" onClick={clearCourseRecord}>Clear Semester</Button>\n                    </Col>\n                    <Col></Col>\n                    <Col>\n                        <Button className=\"button\" id=\"save-semester-button\" onClick={saveSemester} disabled={!validateTable()}>Save Semester</Button>\n                    </Col>\n                </Row>\n                <Row></Row>\n            </ModalBody>\n        </Modal>\n    );\n}","import React from \"react\";\nimport { Col, Card, Container, Row, Button } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Season, Semester } from \"../interface/semester\";\nimport { SemesterTable } from \"./SemesterTable\";\n\nexport function SemesterCard({ semester, deleteSemester, editCourseLauncher }: {\n    semester: Semester;\n    deleteSemester: (semester: Semester) => void;\n    editCourseLauncher: ({course, semester}: {course: Course, semester:Semester}) => void;\n}): JSX.Element {\n\n\n    function getSeason(season: Season): string{\n        switch(season) {\n        case 3:\n            return \"Fall\";\n        case 0:\n            return \"Winter\";\n        case 1:\n            return \"Spring\";\n        case 2:\n            return \"Summer\";\n        default:\n            return \"Inproper Semester\";\n        }\n    }\n\n    return (\n        <Card bg=\"Light\" className=\"text-center\">\n            <Card.Header>\n                <Container>\n                    <Row>\n                        <div className=\"flex-container\">\n                            {/* <div className=\"left-semester-container\"></div> */}\n                            <div className=\"middle-semester-container\">\n                                <Col>\n                                    <h1>{\"Semester: \" + getSeason(semester.season) + \" \" + semester.year}</h1>\n                                </Col>\n                            </div>\n                            <div className=\"right-semester-container\">\n                                <Button variant=\"danger\" onClick={() => deleteSemester(semester)}>\n                                    Delete Semester\n                                </Button>\n                            </div>\n                        </div>\n                    </Row>\n                </Container>\n            </Card.Header>\n            <Card.Body>\n                <Card.Title>Courses:</Card.Title>\n                <Row>\n                    <SemesterTable\n                        semester={semester}\n                        editCourseLauncher={editCourseLauncher}\n                    ></SemesterTable>\n                </Row>\n                <p>PLACEHOLDER FOR SEMESTER STATS (TOT CREDITS, ESTIMATED COST, ETC)</p>\n            </Card.Body>\n            <Card.Footer>\n                <Button variant=\"primary\">Add Semester: {getSeason((semester.season + 1) % 4)}</Button>\n            </Card.Footer>\n        </Card>   \n    );\n}","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport { Semester } from \"../interface/semester\";\nimport { SemesterCard } from \"./SemesterCard\";\n\n\nexport function PlanTable({ semesters, deleteSemester, showModal, editCourseLauncher}: {\n    semesters: Semester[];\n    deleteSemester: (semester: Semester) => void;\n    showModal: (b:boolean) => void;\n    editCourseLauncher: ({course, semester}: {course: Course, semester:Semester}) => void;\n}): JSX.Element {\n\n    const sortedSemesters = semesters.sort(compareSeason).sort(compareYear);\n\n    function compareYear(a: Semester, b: Semester){\n        return a.year - b.year;\n    }\n\n    function compareSeason(a: Semester, b: Semester){\n        return a.season - b.season;\n    }\n\n    function renderList(the_semester: Semester): JSX.Element {\n        return (\n            <SemesterCard \n                key={the_semester.season.toString() + the_semester.year.toString()}\n                semester={the_semester} deleteSemester = {deleteSemester}\n                editCourseLauncher={editCourseLauncher}></SemesterCard>\n        );\n    }\n\n    function listDisplay(truncatedSemesterCardArray: JSX.Element[]): JSX.Element {\n\n        if (!(truncatedSemesterCardArray.length % 2)) {\n            return (\n                <Row key={truncatedSemesterCardArray[0].key}>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                        {truncatedSemesterCardArray[1]}\n                    </Col>\n                </Row>\n            );\n        } else {\n            return (\n                <Row key={truncatedSemesterCardArray[0].key}>\n                    <Col>\n                        {truncatedSemesterCardArray[0]}       \n                    </Col>\n                    <Col>\n                    </Col>\n                </Row>\n            );\n        }\n    }\n\n    const semesterJSX: JSX.Element[] = sortedSemesters.map(renderList);\n    semesterJSX.push(<Card key={0}><Button\n        className=\"button\"\n        data-testid=\"add-semester-button-plan-table\"\n        id=\"add-semester-button-plan-table\"\n        onClick={()=>showModal(true)}>Add Semester</Button></Card>);\n    const semesterPairs: JSX.Element[][] = [];\n\n    for(let i = 0; i < semesterJSX.length; i += 2) {\n        semesterPairs.push(semesterJSX.slice(i, i + 2));\n    }\n    \n\n    return (\n        <div className=\"plan-table\" id=\"plan-table\">\n            {semesterPairs.map(listDisplay)}\n        </div>\n    );\n}","import React, { useState } from \"react\";\nimport { Modal, Col, Row, ModalBody, Form, Button, ModalFooter } from \"react-bootstrap\";\nimport { Course } from \"../interface/course\";\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\n\nexport function EditCourseModal({ setEditSemesterVisible, editSemesterVisible, course, editCourse}: {\n    setEditSemesterVisible: (b:boolean) => void;\n    editSemesterVisible: boolean;\n    course: Course;\n    setCurrentCourse: (c:Course) => void;\n    editCourse: (c:Course) => void;\n}): JSX.Element {\n\n    const [newCourse, setNewCourse] = useState<Course>(course);\n\n    const [validated, setValidated] = useState(false);\n    const hide = ()=>setEditSemesterVisible(false);\n\n    function resetCourseHooks(): void {\n        setNewCourse({\n            department: \"\",\n            courseID: 0,\n            title: \"\",\n            description: \"\",\n            credits: 0,\n            preReqs: [[\"\"]],\n            coReqs: [[\"\"]],\n            semestersOffered: []\n        });\n    }\n \n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>):void => {\n        event.preventDefault();\n        const form: HTMLFormElement = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        } else {\n            setValidated(true);\n            const inputValueArray: string[] = new Array(form.elements.length - 1);\n            for (let i = 0; i<form.elements.length - 1; i++) { // -1 is to remove the button\n                const copyElement: HTMLInputElement = form.elements[i] as HTMLInputElement;\n                inputValueArray[i] = copyElement.value;\n            }\n            console.log(inputValueArray);\n            const updateNewCourse: Course = {\n                department: inputValueArray[0],\n                courseID: parseInt(inputValueArray[1]),\n                title: inputValueArray[2],\n                description: inputValueArray[3],\n                credits: parseInt(inputValueArray[4]),\n                preReqs: course.preReqs,\n                coReqs: course.coReqs,\n                semestersOffered: course.semestersOffered\n            };\n            setNewCourse(updateNewCourse);\n        }\n        \n    };\n\n    function saveCourse() {\n        console.log(newCourse);\n        editCourse(newCourse);\n        resetCourseHooks();\n        setValidated(false);\n        hide();\n    }\n\n    return(\n        <Modal\n            show={editSemesterVisible}\n            onHide={hide}\n            backdrop=\"static\"\n            keyboard={false}\n            data-testid=\"edit-course-modal\"\n            size=\"lg\">\n            <ModalHeader closeButton onClick={resetCourseHooks}>\n                <Modal.Title>Edit {course.department + course.courseID}</Modal.Title>\n            </ModalHeader>\n\n            <ModalBody>\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationDepartment\">\n                            <Form.Label>Department</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"ABCD or ABC\"\n                                defaultValue={course.department}\n                                minLength={3}\n                                maxLength={4}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Department!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Department! Please provide a 3-4 \n                                character long Department tag (ex. ENGL)\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCourseID\">\n                            <Form.Label>Course ID</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"number\"\n                                placeholder=\"123\"\n                                defaultValue={course.courseID}\n                                pattern=\"\\d*\"\n                                minLength={3}\n                                maxLength={3}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Course ID!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Course ID! Please include a 3 digit Course ID (ex. 123). \n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationTitle\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                placeholder=\"Introduction to Course Registration\"\n                                defaultValue={course.title}\n                            />\n                            <Form.Control.Feedback>\n                                Valid Title!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Invalid Title! Please include a valid title (ex. Introduction to Course Registration). \n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"validationDescription\">\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control\n                                required\n                                as=\"textarea\"\n                                style={{ height: \"100px\" }}\n                                type=\"text\"\n                                placeholder={(\"Principles of how to plan a schedule, incluing how breadths work, what\" +\n                                    \"BlueHenPlanner is and how it works, where to find your registration appointment\" +\n                                    \"date and time, etc.\")}\n                                defaultValue={course.description}\n                            />\n                            <Form.Control.Feedback>\n                                Valid description!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid description.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationCredits\">\n                            <Form.Label>Credits</Form.Label>\n                            <Form.Control\n                                required\n                                as=\"select\"\n                                aria-label=\"Floating label select example\"\n                                type=\"number\"\n                                defaultValue={course.credits}\n                            >\n                                <option value={0}>0</option>\n                                <option value={1}>1</option>\n                                <option value={2}>2</option>\n                                <option value={3}>3</option>\n                                <option value={4}>4</option>\n                                <option value={5}>5</option>\n                                <option value={6}>6</option>\n                            </Form.Control>\n                            <Form.Control.Feedback>\n                                Valid credit total!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide a valid credit total between 1 and 9.\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"3\" controlId=\"validationSemestersOffered\">\n                            <Form.Label>Semesters Offered</Form.Label>\n                            <Form.Control\n                                required\n                                type=\"text\"\n                                defaultValue={course.semestersOffered.toString()}                            \n                            />\n                            <Form.Control.Feedback>\n                                Valid Semesters!\n                            </Form.Control.Feedback>\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please provide valid Semester(s) offered (ex. Fall, Spring).\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                    </Row>\n                    <Button\n                        variant=\"primary\"\n                        type=\"submit\"\n                    >Check Course Changes</Button>\n                </Form>\n            </ModalBody>\n            <ModalFooter>\n                {validated && <Button\n                    className=\"button\"\n                    id=\"save-course-button\"\n                    onClick={saveCourse}>Save Course</Button>}\n            </ModalFooter>\n        </Modal>\n    );\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { ControlPanel } from \"./Components/ControlPanel\";\nimport { AddSemesterModal } from \"./Components/AddSemesterModal\";\nimport { Course } from \"./interface/course\";\nimport { Semester } from \"./interface/semester\";\nimport { PlanTable } from \"./Components/PlanTable\";\nimport courseCatalog from \"./Assets/testcourses.json\";\nimport { EditCourseModal } from \"./Components/EditCourseModal\";\n\nfunction App(): JSX.Element {\n    const [plan, setPlan] = useState<Semester[]>([]);\n    const [visible, setVisible] = useState<boolean>(false);\n    const [editSemesterVisible, setEditSemesterVisible] = useState<boolean>(false);\n    const [currentCourse, setCurrentCourse] = useState<Course>({\n        department: \"\",\n        courseID: 0,\n        title: \"\",\n        description: \"\",\n        credits: 0,\n        preReqs: [[\"\"]],\n        coReqs: [[\"\"]],\n        semestersOffered: []\n    });\n    const [semesterIndex, setSemesterIndex] = useState<number>(0);\n    const catalog: Record<string, Course> = courseCatalog;\n\n    function addSemester(semester: Semester) {\n        setPlan([...plan, semester]);\n    }\n\n    function deleteAllSemesters() {\n        setPlan([]);\n        console.log(\"Deleted All Semesters\");\n    }\n\n    function deleteSemester(semester: Semester) {\n        const deleteSemesterIndex = checkSemester(semester);\n        const newPlan = [...plan];\n        newPlan.splice(deleteSemesterIndex, 1);\n        setPlan([...newPlan]);\n    }\n\n    function checkSemester(semesterToCheck: Semester): number {\n        for(let semesterIndex = 0; semesterIndex<plan.length; semesterIndex++){\n            if(semesterToCheck.year === plan[semesterIndex].year && semesterToCheck.season === plan[semesterIndex].season)\n                return semesterIndex;\n        }\n        return -1;\n    }\n\n    function editCourseLauncher({course, semester}: {\n        course: Course;\n        semester: Semester;\n    }): void {\n        setSemesterIndex(checkSemester(semester));\n        setCurrentCourse(course);\n        setEditSemesterVisible(true);\n    }\n\n    function editCourse(course: Course) {\n        console.log(course);\n        const editSemesterIndex: number = semesterIndex;\n        delete plan[editSemesterIndex].courseRecord[currentCourse.department + currentCourse.courseID];\n        plan[editSemesterIndex].courseRecord = {...plan[editSemesterIndex].courseRecord, [course.department + course.courseID]: course};\n        setPlan([...plan]);\n        console.log(plan);\n    }\n\n    return (\n        <Container className=\"App\">\n            <Row>\n                <br></br>\n            </Row>\n            <Row>\n                <ControlPanel showModal={setVisible} deleteAllSemesters={deleteAllSemesters}></ControlPanel>\n            </Row>\n            <Row>\n                <AddSemesterModal addSemester={addSemester}\n                    checkSemester={checkSemester}\n                    setVisible={setVisible}\n                    visible={visible}\n                    catalog={catalog}></AddSemesterModal>\n                <EditCourseModal\n                    setEditSemesterVisible={setEditSemesterVisible}\n                    editSemesterVisible={editSemesterVisible}\n                    course={currentCourse}\n                    setCurrentCourse={setCurrentCourse}\n                    editCourse={editCourse}></EditCourseModal>\n            </Row>\n            <Row>\n                <PlanTable\n                    semesters={plan}\n                    deleteSemester={deleteSemester}\n                    showModal={setVisible}\n                    editCourseLauncher={editCourseLauncher}></PlanTable>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}